@inproceedings{abbottCategoriesContainers2003,
  title = {Categories of {{Containers}}},
  booktitle = {Foundations of {{Software Science}} and {{Computation Structures}}},
  author = {Abbott, Michael and Altenkirch, Thorsten and Ghani, Neil},
  editor = {Gordon, Andrew D.},
  date = {2003},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {23--38},
  publisher = {Springer},
  location = {Berlin, Heidelberg},
  doi = {10.1007/3-540-36576-1_2},
  abstract = {We introduce the notion of containers as a mathematical formalisation of the idea that many important datatypes consist of templates where data is stored. We show that containers have good closure properties under a variety of constructions including the formation of initial algebras and final coalgebras. We also show that containers include strictly positive types and shapely types but that there are containers which do not correspond to either of these. Further, we derive a representation result classifying the nature of polymorphic functions between containers. We finish this paper with an application to the theory of shapely types and refer to a forthcoming paper which applies this theory to differentiable types.},
  isbn = {978-3-540-36576-1},
  langid = {english},
  keywords = {Accessible Category,List Type,Natural Transformation,Positive Type,Shapely Type}
}

@thesis{alexandruIntrinsicallyCorrectSorting2023,
  type = {mathesis},
  title = {Intrinsically Correct Sorting Using Bialgebraic Semantics},
  author = {Alexandru, G. C. (Cass)},
  date = {2023},
  institution = {Radboud University},
  url = {https://www.ru.nl/icis/education/master-thesis/vm/theses-archive/}
}

@unpublished{altenkirchDefinableQuotientsType2011,
  title = {Definable {{Quotients}} in {{Type Theory}}},
  author = {Altenkirch, Thorsten and Anberr\'ee, Thomas and Li, Nuo},
  date = {2011},
  url = {http://www.cs.nott.ac.uk/~psztxa/publ/defquotients.pdf},
  abstract = {In Type Theory, a quotient set is a set representing a setoid. Categorically, this corresponds to the concept of an exact coequalizer. In the present paper we consider the case of a definable quotients, where the quotient set arises as the codomain of a normalization function ---this corresponds to the notion of a split coequalizer. We give a number of examples of definable quotients and notice that it is preferable to use the setoid structure when reasoning about the quotient set. We also show that there are examples where setoids cannot be represented in ordinary Type Theory such as the real numbers or the partiality monad under the assumption that local continuity is admissible in Type Theory.},
  langid = {english},
  pagetotal = {22},
  keywords = {No DOI found}
}

@inproceedings{altenkirchIntegersHigherInductive2020,
  title = {The {{Integers}} as a {{Higher Inductive Type}}},
  booktitle = {Proceedings of the 35th {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Altenkirch, Thorsten and Scoccola, Luis},
  date = {2020-07-08},
  series = {{{LICS}}'20},
  pages = {67--73},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3373718.3394760},
  url = {https://doi.org/10.1145/3373718.3394760},
  urldate = {2021-09-18},
  abstract = {We consider the problem of defining the integers in Homotopy Type Theory (HoTT). We can define the type of integers as signed natural numbers (i.e., using a coproduct), but its induction principle is very inconvenient to work with, since it leads to an explosion of cases. An alternative is to use set-quotients, but here we need to use set-truncation to avoid non-trivial higher equalities. This results in a recursion principle that only allows us to define function into sets (types satisfying UIP). In this paper we consider higher inductive types using either a small universe or bi-invertible maps. These types represent integers without explicit set-truncation that are equivalent to the usual coproduct representation. This is an interesting example since it shows how some coherence problems can be handled in HoTT. We discuss some open questions triggered by this work. The proofs have been formally verified using cubical Agda.},
  isbn = {978-1-4503-7104-9},
  keywords = {coherence problem,higher inductive type,initiality,truncation}
}

@inproceedings{altenkirchMonadsNeedNot2010,
  title = {Monads {{Need Not Be Endofunctors}}},
  booktitle = {Foundations of {{Software Science}} and {{Computational Structures}}},
  author = {Altenkirch, Thorsten and Chapman, James and Uustalu, Tarmo},
  editor = {Ong, Luke},
  date = {2010},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {297--311},
  publisher = {Springer},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-12032-9_21},
  abstract = {We introduce a generalisation of monads, called relative monads, allowing for underlying functors between different categories. Examples include finite-dimensional vector spaces, untyped and typed {$\lambda$}-calculus syntax and indexed containers. We show that the Kleisli and Eilenberg-Moore constructions carry over to relative monads and are related to relative adjunctions. Under reasonable assumptions, relative monads are monoids in the functor category concerned and extend to monads, giving rise to a coreflection between monads and relative monads. Arrows are also an instance of relative monads.},
  isbn = {978-3-642-12032-9},
  langid = {english},
  keywords = {Initial Algebra,Left Adjoint,Monoidal Category,Monoidal Structure,Substitution Rule}
}

@thesis{angiuliComputationalSemanticsCartesianCubical2019,
  title = {Computational {{Semantics}} of {{CartesianCubical Type Theory}}},
  author = {Angiuli, Carlo},
  date = {2019-09},
  institution = {Carnegie Mellon University},
  location = {Pittsburgh, PA},
  url = {https://www.cs.cmu.edu/~cangiuli/thesis/thesis.pdf},
  annotation = {ZSCC: NoCitationData[s0]}
}

@article{angiuliHomotopicalPatchTheory2016,
  title = {Homotopical Patch Theory*},
  author = {Angiuli, Carlo and Morehouse, Edward and Licata, Daniel R. and Harper, Robert},
  year = {2016/ed},
  journaltitle = {Journal of Functional Programming},
  volume = {26},
  publisher = {Cambridge University Press},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S0956796816000198},
  url = {https://www.cambridge.org/core/journals/journal-of-functional-programming/article/abs/homotopical-patch-theory/42AD8BB8A91688BCAC16FD4D6A2C3FE7},
  urldate = {2021-09-23},
  abstract = {Homotopy type theory is an extension of Martin-L\"of type theory, based on a correspondence with homotopy theory and higher category theory. In homotopy type theory, the propositional equality type is proof-relevant, and corresponds to paths in a space. This allows for a new class of datatypes, called higher inductive types, which are specified by constructors not only for points but also for paths. In this paper, we consider a programming application of higher inductive types. Version control systems such as Darcs are based on the notion of patches---syntactic representations of edits to a repository. We show how patch theory can be developed in homotopy type theory. Our formulation separates formal theories of patches from their interpretation as edits to repositories. A patch theory is presented as a higher inductive type. Models of a patch theory are given by maps out of that type, which, being functors, automatically preserve the structure of patches. Several standard tools of homotopy theory come into play, demonstrating the use of these methods in a practical programming context.},
  langid = {english}
}

@article{angiuliInternalizingRepresentationIndependence2021,
  title = {Internalizing Representation Independence with Univalence},
  author = {Angiuli, Carlo and Cavallo, Evan and M\"ortberg, Anders and Zeuner, Max},
  date = {2021-01-04},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {5},
  pages = {12:1--12:30},
  doi = {10.1145/3434293},
  url = {https://doi.org/10.1145/3434293},
  urldate = {2021-09-23},
  abstract = {In their usual form, representation independence metatheorems provide an external guarantee that two implementations of an abstract interface are interchangeable when they are related by an operation-preserving correspondence. If our programming language is dependently-typed, however, we would like to appeal to such invariance results within the language itself, in order to obtain correctness theorems for complex implementations by transferring them from simpler, related implementations. Recent work in proof assistants has shown that Voevodsky's univalence principle allows transferring theorems between isomorphic types, but many instances of representation independence in programming involve non-isomorphic representations. In this paper, we develop techniques for establishing internal relational representation independence results in dependent type theory, by using higher inductive types to simultaneously quotient two related implementation types by a heterogeneous correspondence between them. The correspondence becomes an isomorphism between the quotiented types, thereby allowing us to obtain an equality of implementations by univalence. We illustrate our techniques by considering applications to matrices, queues, and finite multisets. Our results are all formalized in Cubical Agda, a recent extension of Agda which supports univalence and higher inductive types in a computationally well-behaved way.},
  issue = {POPL},
  keywords = {Computer Science - Logic in Computer Science,Computer Science - Programming Languages,Cubical Type Theory,Higher Inductive Types,Proof Assistants,Representation Independence,Univalence}
}

@book{appelVerifiedFunctionalAlgorithms2023,
  title = {Verified {{Functional Algorithms}}},
  author = {Appel, Andrew W.},
  date = {2023-08-23},
  volume = {3},
  number = {Software Foundations},
  url = {https://softwarefoundations.cis.upenn.edu/vfa-current/index.html}
}

@online{arkorFormalTheoryRelative2023,
  title = {The Formal Theory of Relative Monads},
  author = {Arkor, Nathanael and McDermott, Dylan},
  date = {2023-05-17},
  eprint = {2302.14014},
  eprinttype = {arxiv},
  eprintclass = {math},
  doi = {10.48550/arXiv.2302.14014},
  url = {http://arxiv.org/abs/2302.14014},
  urldate = {2024-03-18},
  abstract = {We develop the theory of relative monads and relative adjunctions in a virtual equipment, extending the theory of monads and adjunctions in a 2-category. The theory of relative comonads and relative coadjunctions follows by duality. While some aspects of the theory behave analogously to the non-relative setting, others require new insights. In particular, the universal properties that define the algebra object and the opalgebra object for a monad qua trivial relative monad are stronger than the classical notions of algebra object and opalgebra object for a monad qua monad. Inter alia, we prove a number of representation theorems for relative monads, establishing the unity of several concepts in the literature, including the devices of Walters, the \$j\$-monads of Diers, and the relative monads of Altenkirch, Chapman, and Uustalu. A motivating setting is the virtual equipment \$\textbackslash mathbb\{V\}\textbackslash text\{-\}\textbackslash mathbf\{Cat\}\$ of categories enriched in a monoidal category \$\textbackslash mathbb\{V\}\$, though many of our results are new even for \$\textbackslash mathbb\{V\} = \textbackslash mathbf\{Set\}\$.},
  pubstate = {preprint},
  keywords = {Mathematics - Category Theory}
}

@unpublished{baezSchurFunctorsCategorified2021,
  title = {Schur {{Functors}} and {{Categorified Plethysm}}},
  author = {Baez, John C. and Moeller, Joe and Trimble, Todd},
  date = {2021-06-02},
  eprint = {2106.00190},
  eprinttype = {arxiv},
  eprintclass = {math},
  url = {http://arxiv.org/abs/2106.00190},
  urldate = {2021-08-31},
  abstract = {It is known that the Grothendieck group of the category of Schur functors is the ring of symmetric functions. This ring has a rich structure, much of which is encapsulated in the fact that it is a "plethory": a monoid in the category of birings with its substitution monoidal structure. We show that similarly the category of Schur functors is a "2-plethory", which descends to give the plethory structure on symmetric functions. Thus, much of the structure of symmetric functions exists at a higher level in the category of Schur functors.},
  keywords = {05E05 18A35 18A40 18C15 18D20 18F30 18M05 18M80 19A22 20C30,Mathematics - Category Theory,Mathematics - Representation Theory,No DOI found}
}

@inproceedings{bauerHoTTLibraryFormalization2017,
  title = {The {{HoTT}} Library: A Formalization of Homotopy Type Theory in {{Coq}}},
  shorttitle = {The {{HoTT}} Library},
  booktitle = {Proceedings of the 6th {{ACM SIGPLAN Conference}} on {{Certified Programs}} and {{Proofs}}},
  author = {Bauer, Andrej and Gross, Jason and Lumsdaine, Peter LeFanu and Shulman, Michael and Sozeau, Matthieu and Spitters, Bas},
  date = {2017-01-16},
  series = {{{CPP}} 2017},
  pages = {164--172},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3018610.3018615},
  url = {https://doi.org/10.1145/3018610.3018615},
  urldate = {2022-06-23},
  abstract = {We report on the development of the HoTT library, a formalization of homotopy type theory in the Coq proof assistant. It formalizes most of basic homotopy type theory, including univalence, higher inductive types, and significant amounts of synthetic homotopy theory, as well as category theory and modalities. The library has been used as a basis for several independent developments. We discuss the decisions that led to the design of the library, and we comment on the interaction of homotopy type theory with recently introduced features of Coq, such as universe polymorphism and private inductive types.},
  isbn = {978-1-4503-4705-1},
  keywords = {Coq,Higher inductive types,Homotopy type theory,Univalent foundations,Universe polymorphism}
}

@inproceedings{bentonLinearLcalculusCategorical1993,
  title = {Linear {$\lambda$}-Calculus and Categorical Models Revisited},
  booktitle = {Computer {{Science Logic}}},
  author = {Benton, Nick and Bierman, Gavin and family=Paiva, given=Valeria, prefix=de, useprefix=true and Hyland, J. Martin E.},
  editor = {B\"orger, E. and J\"ager, G. and Kleine B\"uning, H. and Martini, S. and Richter, M. M.},
  date = {1993},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {61--84},
  publisher = {Springer},
  location = {Berlin, Heidelberg},
  doi = {10.1007/3-540-56992-8_6},
  isbn = {978-3-540-47890-4},
  langid = {english},
  keywords = {Categorical Model,Intuitionistic Logic,Linear Logic,Monoidal Category,Natural Deduction}
}

@book{birdAlgebraProgramming1997,
  title = {Algebra of Programming},
  author = {Bird, Richard and family=Moor, given=Oege, prefix=de, useprefix=true},
  date = {1997},
  publisher = {Prentice-Hall, Inc.},
  location = {USA},
  isbn = {978-0-13-507245-5},
  pagetotal = {295}
}

@article{birkhoffStructureAbstractAlgebras1935,
  title = {On the {{Structure}} of {{Abstract Algebras}}},
  author = {Birkhoff, Garrett},
  date = {1935-10},
  journaltitle = {Mathematical Proceedings of the Cambridge Philosophical Society},
  volume = {31},
  number = {4},
  pages = {433--454},
  issn = {1469-8064, 0305-0041},
  doi = {10.1017/S0305004100013463},
  url = {https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/on-the-structure-of-abstract-algebras/D142B3886A3B7A218D8DF8E6DDA2B5B1},
  urldate = {2024-02-26},
  abstract = {The following paper is a study of abstract algebras qua abstract algebras. As no vocabulary suitable for this purpose is current, I have been forced to use a number of new terms, and extend the meaning of some accepted ones.},
  langid = {english}
}

@article{blassWordsFreeAlgebras1983,
  title = {Words, Free Algebras, and Coequalizers},
  author = {Blass, Andreas},
  date = {1983},
  journaltitle = {Fundamenta Mathematicae},
  shortjournal = {Fund. Math.},
  volume = {117},
  number = {2},
  pages = {117--160},
  issn = {0016-2736, 1730-6329},
  doi = {10.4064/fm-117-2-117-160},
  url = {http://www.impan.pl/get/doi/10.4064/fm-117-2-117-160},
  urldate = {2024-02-25},
  langid = {english}
}

@article{bluteDifferentialCategories2006,
  title = {Differential Categories},
  author = {Blute, R. F. and Cockett, J. R. B. and Seely, R. A. G.},
  date = {2006-12},
  journaltitle = {Mathematical Structures in Computer Science},
  volume = {16},
  number = {6},
  pages = {1049--1083},
  publisher = {Cambridge University Press},
  issn = {1469-8072, 0960-1295},
  doi = {10.1017/S0960129506005676},
  url = {https://www.cambridge.org/core/journals/mathematical-structures-in-computer-science/article/differential-categories/794F222FE0710CBEF06492127AF4E5CF},
  urldate = {2021-09-22},
  abstract = {Following work of Ehrhard and Regnier, we introduce the notion of a differential category: an additive symmetric monoidal category with a comonad (a `coalgebra modality') and a differential combinator satisfying a number of coherence conditions. In such a category one should imagine the morphisms in the base category as being linear maps and the morphisms in the coKleisli category as being smooth (infinitely differentiable). Although such categories do not necessarily arise from models of linear logic, one should think of this as replacing the usual dichotomy of linear vs. stable maps established for coherence spaces.After establishing the basic axioms, we give a number of examples. The most important example arises from a general construction, a comonad \$S\_\textbackslash infty\$ on the category of vector spaces. This comonad and associated differential operators fully capture the usual notion of derivatives of smooth maps. Finally, we derive additional properties of differential categories in certain special cases, especially when the comonad is a storage modality, as in linear logic. In particular, we introduce the notion of a categorical model of the differential calculus, and show that it captures the not-necessarily-closed fragment of Ehrhard--Regnier differential \$\textbackslash lambda\$-calculus.},
  langid = {english}
}

@article{bluteDifferentialCategoriesRevisited2020,
  title = {Differential {{Categories Revisited}}},
  author = {Blute, R. F. and Cockett, J. R. B. and Lemay, J.-S. P. and Seely, R. A. G.},
  date = {2020-04-01},
  journaltitle = {Applied Categorical Structures},
  shortjournal = {Appl Categor Struct},
  volume = {28},
  number = {2},
  pages = {171--235},
  issn = {1572-9095},
  doi = {10.1007/s10485-019-09572-y},
  url = {https://doi.org/10.1007/s10485-019-09572-y},
  urldate = {2021-09-16},
  abstract = {Differential categories were introduced to provide a minimal categorical doctrine for differential linear logic. Here we revisit the formalism and, in particular, examine the two different approaches to defining differentiation which were introduced. The basic approach used a deriving transformation, while a more refined approach, in the presence of a bialgebra modality, used a codereliction. The latter approach is particularly relevant to linear logic settings, where the coalgebra modality is monoidal and the Seely isomorphisms give rise to a bialgebra modality. Here, we prove that these apparently distinct notions of differentiation, in the presence of a monoidal coalgebra modality, are completely equivalent. Thus, for linear logic settings, there is only one notion of differentiation. This paper also presents a number of separating examples for coalgebra modalities including examples which are and are not monoidal, as well as examples which do and do not support differential structure. Of particular interest is the observation that---somewhat counter-intuitively---differential algebras never induce a differential category although they provide a monoidal coalgebra modality. On the other hand, Rota--Baxter algebras---which are usually associated with integration---provide an example of a differential category which has a non-monoidal coalgebra modality.},
  langid = {english}
}

@online{bradyIdrisQuantitativeType2021,
  title = {Idris 2: {{Quantitative Type Theory}} in {{Practice}}},
  shorttitle = {Idris 2},
  author = {Brady, Edwin},
  date = {2021-04-01},
  eprint = {2104.00480},
  eprinttype = {arxiv},
  eprintclass = {cs},
  doi = {10.48550/arXiv.2104.00480},
  url = {http://arxiv.org/abs/2104.00480},
  urldate = {2024-03-18},
  abstract = {Dependent types allow us to express precisely what a function is intended to do. Recent work on Quantitative Type Theory (QTT) extends dependent type systems with linearity, also allowing precision in expressing when a function can run. This is promising, because it suggests the ability to design and reason about resource usage protocols, such as we might find in distributed and concurrent programming, where the state of a communication channel changes throughout program execution. As yet, however, there has not been a full-scale programming language with which to experiment with these ideas. Idris 2 is a new version of the dependently typed language Idris, with a new core language based on QTT, supporting linear and dependent types. In this paper, we introduce Idris 2, and describe how QTT has influenced its design. We give examples of the benefits of QTT in practice including: expressing which data is erased at run time, at the type level; and, resource tracking in the type system leading to type-safe concurrent programming with session types.},
  pubstate = {preprint},
  keywords = {Computer Science - Programming Languages}
}

@incollection{bucciarelliNotEnoughPoints2007,
  title = {Not {{Enough Points Is Enough}}},
  booktitle = {Computer {{Science Logic}}},
  author = {Bucciarelli, Antonio and Ehrhard, Thomas and Manzonetto, Giulio},
  editor = {Duparc, Jacques and Henzinger, Thomas A.},
  date = {2007},
  series = {{{LNCS}}},
  volume = {4646},
  pages = {298--312},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  issn = {0302-9743, 1611-3349},
  doi = {10.1007/978-3-540-74915-8_24},
  url = {http://link.springer.com/10.1007/978-3-540-74915-8_24},
  urldate = {2022-06-24},
  abstract = {Models of the untyped {$\lambda$}-calculus may be defined either as applicative structures satisfying a bunch of first-order axioms ({$\lambda$}-models), or as reflexive objects in cartesian closed categories (categorical models). In this paper we show that any categorical model of {$\lambda$}-calculus can be presented as a {$\lambda$}-model, even when the underlying category does not have enough points. We provide an example of an extensional model of {$\lambda$}-calculus in a category of sets and relations which has not enough points. Finally, we present some of its algebraic properties which make it suitable for dealing with non-deterministic extensions of {$\lambda$}-calculus.},
  isbn = {978-3-540-74914-1 978-3-540-74915-8},
  langid = {english}
}

@article{buchholtzGenuinePairsTrouble2021,
  title = {Genuine Pairs and the Trouble with Triples in Homotopy Type Theory},
  author = {Buchholtz, Ulrik},
  date = {2021-06-04},
  pages = {28},
  url = {https://types21.liacs.nl/timetable/event/genuine-pairs-and-the-trouble-with-triples-in-homotopy-type-theory/},
  langid = {english},
  keywords = {No DOI found}
}

@inproceedings{buchholtzHigherGroupsHomotopy2018,
  title = {Higher {{Groups}} in {{Homotopy Type Theory}}},
  booktitle = {Proceedings of the 33rd {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Buchholtz, Ulrik and family=Doorn, given=Floris, prefix=van, useprefix=true and Rijke, Egbert},
  date = {2018-07-09},
  series = {{{LICS}}'18},
  pages = {205--214},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3209108.3209150},
  url = {https://doi.org/10.1145/3209108.3209150},
  urldate = {2021-09-18},
  abstract = {We present a development of the theory of higher groups, including infinity groups and connective spectra, in homotopy type theory. An infinity group is simply the loops in a pointed, connected type, where the group structure comes from the structure inherent in the identity types of Martin-L\"of type theory. We investigate ordinary groups from this viewpoint, as well as higher dimensional groups and groups that can be delooped more than once. A major result is the stabilization theorem, which states that if an n-type can be delooped n + 2 times, then it is an infinite loop type. Most of the results have been formalized in the Lean proof assistant.},
  isbn = {978-1-4503-5583-4},
  keywords = {Higher groups,Homotopy type theory,Lean proof assistant}
}

@article{caretteReversibleProgramsUnivalent2018,
  title = {From {{Reversible Programs}} to {{Univalent Universes}} and {{Back}}},
  author = {Carette, Jacques and Chen, Chao-Hong and Choudhury, Vikraman and Sabry, Amr},
  date = {2018-04},
  journaltitle = {Electronic Notes in Theoretical Computer Science},
  shortjournal = {Electronic Notes in Theoretical Computer Science},
  volume = {336},
  pages = {5--25},
  issn = {15710661},
  doi = {10.1016/j.entcs.2018.03.013},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S1571066118300161},
  urldate = {2022-05-07},
  abstract = {We establish a close connection between a reversible programming language based on type isomorphisms and a formally presented univalent universe. The correspondence relates combinators witnessing type isomorphisms in the programming language to paths in the univalent universe; and combinator optimizations in the programming language to 2-paths in the univalent universe. The result suggests a simple computational interpretation of paths and of univalence in terms of familiar programming constructs whenever the universe in question is computable.},
  langid = {english}
}

@article{cattaniProfunctorsOpenMaps2005,
  title = {Profunctors, Open Maps and Bisimulation},
  author = {Cattani, Gian Luca and Winskel, Glynn},
  date = {2005-06},
  journaltitle = {Mathematical Structures in Computer Science},
  volume = {15},
  number = {3},
  pages = {553--614},
  publisher = {Cambridge University Press},
  issn = {1469-8072, 0960-1295},
  doi = {10.1017/S0960129505004718},
  url = {https://www.cambridge.org/core/journals/mathematical-structures-in-computer-science/article/profunctors-open-maps-and-bisimulation/656D6BCECD00779465B75424244E6220},
  urldate = {2023-09-29},
  abstract = {This paper studies fundamental connections between profunctors (that is, distributors, or bimodules), open maps and bisimulation. In particular, it proves that a colimit preserving functor between presheaf categories (corresponding to a profunctor) preserves open maps and open map bisimulation. Consequently, the composition of profunctors preserves open maps as 2-cells. A guiding idea is the view that profunctors, and colimit preserving functors, are linear maps in a model of classical linear logic. But profunctors, and colimit preserving functors, as linear maps, are too restrictive for many applications. This leads to a study of a range of pseudo-comonads and of how non-linear maps in their co-Kleisli bicategories preserve open maps and bisimulation. The pseudo-comonads considered are based on finite colimit completion, `lifting', and indexed families. The paper includes an appendix summarising the key results on coends, left Kan extensions and the preservation of colimits. One motivation for this work is that it provides a mathematical framework for extending domain theory and denotational semantics of programming languages to the more intricate models, languages and equivalences found in concurrent computation, but the results are likely to have more general applicability because of the ubiquitous nature of profunctors.},
  langid = {english}
}

@article{cavalloHigherInductiveTypes2019,
  title = {Higher Inductive Types in Cubical Computational Type Theory},
  author = {Cavallo, Evan and Harper, Robert},
  date = {2019-01-02},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {3},
  pages = {1:1--1:27},
  doi = {10.1145/3290314},
  url = {https://doi.org/10.1145/3290314},
  urldate = {2021-09-23},
  abstract = {Homotopy type theory proposes higher inductive types (HITs) as a means of defining and reasoning about inductively-generated objects with higher-dimensional structure. As with the univalence axiom, however, homotopy type theory does not specify the computational behavior of HITs. Computational interpretations have now been provided for univalence and specific HITs by way of cubical type theories, which use a judgmental infrastructure of dimension variables. We extend the cartesian cubical computational type theory introduced by Angiuli et al. with a schema for indexed cubical inductive types (CITs), an adaptation of higher inductive types to the cubical setting. In doing so, we isolate the canonical values of a cubical inductive type and prove a canonicity theorem with respect to these values.},
  issue = {POPL},
  keywords = {cubical type theory,higher inductive types,homotopy type theory}
}

@software{choudhuryArtifactSymmetriesReversible2021,
  title = {Artifact for {{Symmetries}} in {{Reversible Programming}}},
  author = {Choudhury, Vikraman and Karwowski, Jacek},
  date = {2021-10-07},
  doi = {10.5281/zenodo.5671746},
  url = {https://zenodo.org/record/5671746},
  urldate = {2022-12-15},
  abstract = {Artifact for POPL'22},
  organization = {Zenodo}
}

@article{choudhuryFinitemultisetConstructionHoTT2019,
  title = {The Finite-Multiset Construction in {{HoTT}}},
  author = {Choudhury, Vikraman and Fiore, Marcelo P.},
  date = {2019-08-12},
  pages = {40},
  url = {https://hott.github.io/HoTT-2019/conf-slides/Choudhury.pdf},
  langid = {english},
  keywords = {No DOI found},
  annotation = {ZSCC: NoCitationData[s1]}
}

@article{choudhuryFreeCommutativeMonoids2023,
  title = {Free {{Commutative Monoids}} in {{Homotopy Type Theory}}},
  author = {Choudhury, Vikraman and Fiore, Marcelo},
  date = {2023-02-22},
  journaltitle = {Electronic Notes in Theoretical Informatics and Computer Science},
  volume = {Volume 1 - Proceedings of...},
  pages = {10492},
  doi = {10.46298/entics.10492},
  url = {https://entics.episciences.org/10492},
  urldate = {2023-02-27},
  abstract = {We develop a constructive theory of finite multisets in Homotopy Type Theory, defining them as free commutative monoids. After recalling basic structural properties of the free commutative-monoid construction, we formalise and establish the categorical universal property of two, necessarily equivalent, algebraic presentations of free commutative monoids using 1-HITs. These presentations correspond to two different equational theories invariably including commutation axioms. In this setting, we prove important structural combinatorial properties of finite multisets. These properties are established in full generality without assuming decidable equality on the carrier set.   As an application, we present a constructive formalisation of the relational model of classical linear logic and its differential structure. This leads to constructively establishing that free commutative monoids are conical refinement monoids. Thereon we obtain a characterisation of the equality type of finite multisets and a new presentation of the free commutative-monoid construction as a set-quotient of the list construction. These developments crucially rely on the commutation relation of creation/annihilation operators associated with the free commutative-monoid construction seen as a combinatorial Fock space.},
  langid = {english}
}

@article{choudhurySymmetriesReversibleProgramming2022,
  title = {Symmetries in Reversible Programming: From Symmetric Rig Groupoids to Reversible Programming Languages},
  shorttitle = {Symmetries in Reversible Programming},
  author = {Choudhury, Vikraman and Karwowski, Jacek and Sabry, Amr},
  date = {2022-01-11},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {6},
  pages = {6:1--6:32},
  doi = {10.1145/3498667},
  url = {https://doi.org/10.1145/3498667},
  urldate = {2022-04-29},
  abstract = {The Pi family of reversible programming languages for boolean circuits is presented as a syntax of combinators witnessing type isomorphisms of algebraic data types. In this paper, we give a denotational semantics for this language, using weak groupoids \`a la Homotopy Type Theory, and show how to derive an equational theory for it, presented by 2-combinators witnessing equivalences of type isomorphisms. We establish a correspondence between the syntactic groupoid of the language and a formally presented univalent subuniverse of finite types. The correspondence relates 1-combinators to 1-paths, and 2-combinators to 2-paths in the universe, which is shown to be sound and complete for both levels, forming an equivalence of groupoids. We use this to establish a Curry-Howard-Lambek correspondence between Reversible Logic, Reversible Programming Languages, and Symmetric Rig Groupoids, by showing that the syntax of Pi is presented by the free symmetric rig groupoid, given by finite sets and bijections. Using the formalisation of our results, we perform normalisation-by-evaluation, verification and synthesis of reversible logic gates, motivated by examples from quantum computing. We also show how to reason about and transfer theorems between different representations of reversible circuits.},
  issue = {POPL},
  keywords = {groupoids,groups,homotopy type theory,permutations,reversible computing,reversible programming languages,rewriting,type isomorphisms,univalent foundations}
}

@article{cliftCofreeCoalgebrasDifferential2020,
  title = {Cofree Coalgebras and Differential Linear Logic},
  author = {Clift, James and Murfet, Daniel},
  date = {2020-04},
  journaltitle = {Mathematical Structures in Computer Science},
  shortjournal = {Math. Struct. Comp. Sci.},
  volume = {30},
  number = {4},
  pages = {416--457},
  issn = {0960-1295, 1469-8072},
  doi = {10.1017/S0960129520000134},
  url = {https://www.cambridge.org/core/product/identifier/S0960129520000134/type/journal_article},
  urldate = {2023-09-29},
  abstract = {We prove that the semantics of intuitionistic linear logic in vector spaces which uses cofree coalgebras is also a model of differential linear logic, and that the Cartesian closed category of cofree coalgebras is a model of the simply typed differential {$\lambda$}-calculus.},
  langid = {english}
}

@article{cohenCubicalTypeTheory2018,
  title = {Cubical {{Type Theory}}: {{A Constructive Interpretation}} of the {{Univalence Axiom}}},
  shorttitle = {Cubical {{Type Theory}}},
  author = {Cohen, Cyril and Coquand, Thierry and Huber, Simon and M\"ortberg, Anders},
  namea = {Herbstritt, Marc},
  nameatype = {collaborator},
  date = {2018},
  pages = {34 pages},
  publisher = {Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik GmbH, Wadern/Saarbruecken, Germany},
  doi = {10.4230/LIPICS.TYPES.2015.5},
  url = {http://drops.dagstuhl.de/opus/volltexte/2018/8475/},
  urldate = {2021-06-29},
  abstract = {This paper presents a type theory in which it is possible to directly manipulate n-dimensional cubes (points, lines, squares, cubes, etc.) based on an interpretation of dependent type theory in a cubical set model. This enables new ways to reason about identity types, for instance, function extensionality is directly provable in the system. Further, Voevodsky's univalence axiom is provable in this system. We also explain an extension with some higher inductive types like the circle and propositional truncation. Finally we provide semantics for this cubical type theory in a constructive meta-theory.},
  langid = {english},
  keywords = {000 Computer science knowledge general works,Computer Science},
  annotation = {ZSCC: NoCitationData[s1]}
}

@inproceedings{coquandHigherInductiveTypes2018,
  title = {On {{Higher Inductive Types}} in {{Cubical Type Theory}}},
  booktitle = {Proceedings of the 33rd {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Coquand, Thierry and Huber, Simon and M\"ortberg, Anders},
  date = {2018-07-09},
  series = {{{LICS}}'18},
  pages = {255--264},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3209108.3209197},
  url = {https://doi.org/10.1145/3209108.3209197},
  urldate = {2021-09-22},
  abstract = {Cubical type theory provides a constructive justification to certain aspects of homotopy type theory such as Voevodsky's univalence axiom. This makes many extensionality principles, like function and propositional extensionality, directly provable in the theory. This paper describes a constructive semantics, expressed in a presheaf topos with suitable structure inspired by cubical sets, of some higher inductive types. It also extends cubical type theory by a syntax for the higher inductive types of spheres, torus, suspensions, truncations, and pushouts. All of these types are justified by the semantics and have judgmental computation rules for all constructors, including the higher dimensional ones, and the universes are closed under these type formers.},
  isbn = {978-1-4503-5583-4},
  keywords = {Cubical Type Theory,Higher Inductive Types,Homotopy Type Theory,Univalent Foundations}
}

@inproceedings{danielssonBagEquivalenceProofRelevant2012,
  title = {Bag {{Equivalence}} via a {{Proof-Relevant Membership Relation}}},
  booktitle = {Interactive {{Theorem Proving}}},
  author = {Danielsson, Nils Anders},
  editor = {Beringer, Lennart and Felty, Amy},
  date = {2012},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {149--165},
  publisher = {Springer},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-32347-8_11},
  abstract = {Two lists are bag equivalent if they are permutations of each other, i.e. if they contain the same elements, with the same multiplicity, but perhaps not in the same order. This paper describes how one can define bag equivalence as the presence of bijections between sets of membership proofs. This definition has some desirable properties: Many bag equivalences can be proved using a flexible form of equational reasoning. The definition generalises easily to arbitrary unary containers, including types with infinite values, such as streams. By using a slight variation of the definition one gets set equivalence instead, i.e. equality up to order and multiplicity. Other variations give the subset and subbag preorders. The definition works well in mechanised proofs.},
  isbn = {978-3-642-32347-8},
  langid = {english},
  keywords = {Container Type,Implicit Argument,List Membership,Mechanise Proof,Type Theory}
}

@inproceedings{dayClosedCategoriesFunctors1970,
  title = {On Closed Categories of Functors},
  booktitle = {Reports of the {{Midwest Category Seminar IV}}},
  author = {Day, Brian J.},
  editor = {MacLane, S. and Applegate, H. and Barr, M. and Day, B. and Dubuc, E. and {Phreilambud} and Pultr, A. and Street, R. and Tierney, M. and Swierczkowski, S.},
  date = {1970},
  series = {Lecture {{Notes}} in {{Mathematics}}},
  pages = {1--38},
  publisher = {Springer},
  location = {Berlin, Heidelberg},
  doi = {10.1007/BFb0060438},
  isbn = {978-3-540-36292-0},
  langid = {english},
  keywords = {Extra Variable,Follow Diagram Commute,Monoidal Category,Natural Isomorphism,Natural Transformation}
}

@article{dayNoteCompactClosed1977,
  title = {Note on Compact Closed Categories},
  author = {Day, B. J.},
  date = {1977-11},
  journaltitle = {Journal of the Australian Mathematical Society},
  volume = {24},
  number = {3},
  pages = {309--311},
  publisher = {Cambridge University Press},
  issn = {1446-8107, 1446-7887},
  doi = {10.1017/S1446788700020334},
  url = {https://www.cambridge.org/core/journals/journal-of-the-australian-mathematical-society/article/note-on-compact-closed-categories/F36D383A92F41665ED4BBE9F8F199B20},
  urldate = {2021-09-22},
  abstract = {Several categorical aspects of localisation to compact closed categories and free compact closed categories are discussed.},
  langid = {english}
}

@article{demeoMachineCheckedProofBirkhoff2022,
  title = {A {{Machine-Checked Proof}} of {{Birkhoff}}'s {{Variety Theorem}} in {{Martin-L\"of Type Theory}}},
  author = {DeMeo, William and Carette, Jacques},
  namea = {Basold, Henning and Cockx, Jesper and Ghilezan, Silvia},
  nameatype = {collaborator},
  date = {2022},
  pages = {21 pages, 474672 bytes},
  publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f\"ur Informatik},
  issn = {1868-8969},
  doi = {10.4230/LIPICS.TYPES.2021.4},
  url = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.TYPES.2021.4},
  urldate = {2024-02-26},
  abstract = {The Agda Universal Algebra Library is a project aimed at formalizing the foundations of universal algebra, equational logic and model theory in dependent type theory using Agda. In this paper we draw from many components of the library to present a self-contained, formal, constructive proof of Birkhoff's HSP theorem in Martin-L\"of dependent type theory. This achieves one of the project's initial goals: to demonstrate the expressive power of inductive and dependent types for representing and reasoning about general algebraic and relational structures by using them to formalize a significant theorem in the field.},
  isbn = {9783959772549},
  langid = {english},
  keywords = {Agda,Computing methodologies  Representation of mathematical objects,constructive mathematics,dependent types,equational logic,formal verification,Martin-Lof type theory,model theory,Theory of computation  Logic and verification,Theory of computation  Type theory,universal algebra}
}

@book{dijkstraDisciplineProgramming1997,
  title = {A  {{Discipline}} of {{Programming}}},
  author = {Dijkstra, Edsger Wybe},
  date = {1997-09},
  edition = {1},
  publisher = {Prentice Hall PTR},
  location = {USA},
  isbn = {978-0-13-215871-8},
  pagetotal = {240}
}

@article{dobbertinRefinementMonoidsVaught1983,
  title = {Refinement Monoids, {{Vaught}} Monoids, and {{Boolean}} Algebras},
  author = {Dobbertin, Hans},
  date = {1983-11-01},
  journaltitle = {Mathematische Annalen},
  shortjournal = {Math. Ann.},
  volume = {265},
  number = {4},
  pages = {473--487},
  issn = {1432-1807},
  doi = {10.1007/BF01455948},
  url = {https://doi.org/10.1007/BF01455948},
  urldate = {2022-06-24},
  langid = {english}
}

@article{dubucFreeMonoids1974,
  title = {Free Monoids},
  author = {Dubuc, Eduardo J},
  date = {1974-05-01},
  journaltitle = {Journal of Algebra},
  shortjournal = {Journal of Algebra},
  volume = {29},
  number = {2},
  pages = {208--228},
  issn = {0021-8693},
  doi = {10.1016/0021-8693(74)90095-7},
  url = {https://www.sciencedirect.com/science/article/pii/0021869374900957},
  urldate = {2024-02-14}
}

@article{ehrhardIntroductionDifferentialLinear2018,
  title = {An Introduction to Differential Linear Logic: Proof-Nets, Models and Antiderivatives},
  shorttitle = {An Introduction to Differential Linear Logic},
  author = {Ehrhard, Thomas},
  date = {2018-08},
  journaltitle = {Mathematical Structures in Computer Science},
  volume = {28},
  number = {7},
  pages = {995--1060},
  publisher = {Cambridge University Press},
  issn = {0960-1295, 1469-8072},
  doi = {10.1017/S0960129516000372},
  url = {https://www.cambridge.org/core/journals/mathematical-structures-in-computer-science/article/an-introduction-to-differential-linear-logic-proofnets-models-and-antiderivatives/9852C5F1762B016666DD8DE35129C534},
  urldate = {2021-09-21},
  abstract = {Differential linear logic enriches linear logic with additional logical rules for the exponential connectives, dual to the usual rules of dereliction, weakening and contraction. We present a proof-net syntax for differential linear logic and a categorical axiomatization of its denotational models. We also introduce a simple categorical condition on these models under which a general antiderivative operation becomes available. Last, we briefly describe the model of sets and relations and give a more detailed account of the model of finiteness spaces and linear and continuous functions.},
  langid = {english}
}

@article{ehrhardScottModelLinear2012,
  title = {The {{Scott}} Model of Linear Logic Is the Extensional Collapse of Its Relational Model},
  author = {Ehrhard, Thomas},
  date = {2012-03-23},
  journaltitle = {Theoretical Computer Science},
  shortjournal = {Theoretical Computer Science},
  volume = {424},
  pages = {20--45},
  issn = {0304-3975},
  doi = {10.1016/j.tcs.2011.11.027},
  url = {https://www.sciencedirect.com/science/article/pii/S0304397511009467},
  urldate = {2022-06-24},
  abstract = {We show that the extensional collapse of the relational model of linear logic is the model of prime-algebraic complete lattices, a natural extension to linear logic of the well known Scott semantics of the lambda-calculus.},
  langid = {english},
  keywords = {Denotational semantics,Lambda-calculus,Linear logic}
}

@unpublished{fioreAxiomaticsCombinatorialModel2015,
  title = {An {{Axiomatics}} and a {{Combinatorial Model}} of {{Creation}}/{{Annihilation Operators}}},
  author = {Fiore, Marcelo P.},
  date = {2015-06-21},
  eprint = {1506.06402},
  eprinttype = {arxiv},
  eprintclass = {math},
  url = {http://arxiv.org/abs/1506.06402},
  urldate = {2021-09-22},
  abstract = {A categorical axiomatic theory of creation/annihilation operators on bosonic Fock space is introduced and the combinatorial model that motivated it is presented. Commutation relations and coherent states are considered in both frameworks.},
  keywords = {Mathematics - Category Theory}
}

@article{fioreCartesianClosedBicategory2008,
  title = {The Cartesian Closed Bicategory of Generalised Species of Structures},
  author = {Fiore, M. P. and Gambino, N. and Hyland, J. M. E. and Winskel, G.},
  date = {2008-02},
  journaltitle = {Journal of the London Mathematical Society},
  shortjournal = {Journal of the London Mathematical Society},
  volume = {77},
  number = {1},
  pages = {203--220},
  issn = {00246107},
  doi = {10.1112/jlms/jdm096},
  url = {http://doi.wiley.com/10.1112/jlms/jdm096},
  urldate = {2020-12-17},
  abstract = {The concept of generalised species of structures between small categories and, correspondingly, that of generalised analytic functor between presheaf categories are introduced. An operation of substitution for generalised species, which is the counterpart to the composition of generalised analytic functors, is also put forward. These definitions encompass most notions of combinatorial species considered in the literature---including of course Joyal's original notion---together with their associated substitution operation. Our first main result exhibits the substitution calculus of generalised species as arising from a Kleisli bicategory for a pseudo-comonad on profunctors. Our second main result establishes that the bicategory of generalised species of structures is cartesian closed.},
  langid = {english},
  annotation = {ZSCC: 0000082}
}

@inproceedings{fioreConstructingInfinitaryQuotientInductive2020,
  title = {Constructing {{Infinitary Quotient-Inductive Types}}},
  booktitle = {Foundations of {{Software Science}} and {{Computation Structures}}},
  author = {Fiore, Marcelo P. and Pitts, Andrew M. and Steenkamp, S. C.},
  editor = {Goubault-Larrecq, Jean and K\"onig, Barbara},
  date = {2020},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {257--276},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-030-45231-5_14},
  abstract = {This paper introduces an expressive class of quotient-inductive types, called QW-types. We show that in dependent type theory with uniqueness of identity proofs, even the infinitary case of QW-types can be encoded using the combination of inductive-inductive definitions involving strictly positive occurrences of Hofmann-style quotient types, and Abel's size types. The latter, which provide a convenient constructive abstraction of what classically would be accomplished with transfinite ordinals, are used to prove termination of the recursive definitions of the elimination and computation properties of our encoding of QW-types. The development is formalized using the Agda theorem prover.},
  isbn = {978-3-030-45231-5},
  langid = {english},
  keywords = {category theory,dependent type theory,higher inductive types,inductive-inductive definitions,quotient types,sized types}
}

@inproceedings{fioreDifferentialStructureModels2007,
  title = {Differential {{Structure}} in {{Models}} of {{Multiplicative Biadditive Intuitionistic Linear Logic}}},
  booktitle = {Typed {{Lambda Calculi}} and {{Applications}}},
  author = {Fiore, Marcelo P.},
  editor = {Della Rocca, Simona Ronchi},
  date = {2007},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {163--177},
  publisher = {Springer},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-540-73228-0_13},
  abstract = {In the first part of the paper I investigate categorical models of multiplicative biadditive intuitionistic linear logic, and note that in them some surprising coherence laws arise. The thesis for the second part of the paper is that these models provide the right framework for investigating differential structure in the context of linear logic. Consequently, within this setting, I introduce a notion of creation operator (as considered by physicists for bosonic Fock space in the context of quantum field theory), provide an equivalent description of creation operators in terms of creation maps, and show that they induce a differential operator satisfying all the basic laws of differentiation (the product and chain rules, the commutation relations, etc.).},
  isbn = {978-3-540-73228-0},
  langid = {english},
  keywords = {Annihilation Operator,Categorical Model,Creation Operator,Monoidal Category,Natural Transformation}
}

@article{fioreGeneralisedSpeciesStructures2004,
  title = {Generalised {{Species}} of {{Structures}}: {{Cartesian Closed}} and {{Differential Structure}}},
  author = {Fiore, Marcelo P.},
  date = {2004-03},
  pages = {28},
  url = {https://www.cl.cam.ac.uk/~mpf23/Notes/gs-draft.pdf},
  abstract = {We generalise Joyal's notion of species of structures and develop their combinatorial calculus. In particular, we provide operations for their composition, addition, multiplication, pairing and projection, abstraction and evaluation, and differentiation; developing both the cartesian closed and linear structures of species.},
  langid = {english},
  annotation = {ZSCC: 0000002}
}

@article{fioreQuotientsInductiveTypes2022,
  title = {Quotients, Inductive Types, and Quotient Inductive Types},
  author = {Fiore, Marcelo P. and Pitts, Andrew M. and Steenkamp, S. C.},
  date = {2022-06-07},
  journaltitle = {Logical Methods in Computer Science},
  volume = {Volume 18, Issue 2},
  pages = {7076},
  issn = {1860-5974},
  doi = {10.46298/lmcs-18(2:15)2022},
  url = {https://lmcs.episciences.org/7076},
  urldate = {2022-12-15},
  abstract = {This paper introduces an expressive class of indexed quotient-inductive types, called QWI types, within the framework of constructive type theory. They are initial algebras for indexed families of equational theories with possibly infinitary operators and equations. We prove that QWI types can be derived from quotient types and inductive types in the type theory of toposes with natural number object and universes, provided those universes satisfy the Weakly Initial Set of Covers (WISC) axiom. We do so by constructing QWI types as colimits of a family of approximations to them defined by well-founded recursion over a suitable notion of size, whose definition involves the WISC axiom. We developed the proof and checked it using the Agda theorem prover.},
  langid = {english},
  keywords = {Computer Science - Logic in Computer Science}
}

@article{fioreRelativePseudomonadsKleisli2018,
  title = {Relative Pseudomonads, {{Kleisli}} Bicategories, and Substitution Monoidal Structures},
  author = {Fiore, M. P. and Gambino, N. and Hyland, J. M. E. and Winskel, G.},
  date = {2018-07-01},
  journaltitle = {Selecta Mathematica},
  shortjournal = {Sel. Math. New Ser.},
  volume = {24},
  number = {3},
  pages = {2791--2830},
  issn = {1420-9020},
  doi = {10.1007/s00029-017-0361-3},
  url = {https://doi.org/10.1007/s00029-017-0361-3},
  urldate = {2022-05-07},
  abstract = {We introduce the notion of a relative pseudomonad, which generalizes the notion of a pseudomonad, and define the Kleisli bicategory associated to a relative pseudomonad. We then present an efficient method to define pseudomonads on the Kleisli bicategory of a relative pseudomonad. The results are applied to define several pseudomonads on the bicategory of profunctors in an homogeneous way and provide a uniform approach to the definition of bicategories that are of interest in operad theory, mathematical logic, and theoretical computer science.},
  langid = {english},
  keywords = {18C20,18D05,18D50}
}

@article{foxCoalgebrasCartesianCategories1976,
  title = {Coalgebras and Cartesian Categories},
  author = {Fox, Thomas},
  date = {1976-01-01},
  journaltitle = {Communications in Algebra},
  volume = {4},
  number = {7},
  pages = {665--667},
  publisher = {Taylor \& Francis},
  issn = {0092-7872},
  doi = {10.1080/00927877608822127},
  url = {https://doi.org/10.1080/00927877608822127},
  urldate = {2024-02-29}
}

@inproceedings{fruminFiniteSetsHomotopy2018,
  title = {Finite Sets in Homotopy Type Theory},
  booktitle = {Proceedings of the 7th {{ACM SIGPLAN International Conference}} on {{Certified Programs}} and {{Proofs}}},
  author = {Frumin, Dan and Geuvers, Herman and Gondelman, L\'eon and family=Weide, given=Niels, prefix=van der, useprefix=false},
  date = {2018-01-08},
  series = {{{CPP}} 2018},
  pages = {201--214},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3167085},
  url = {https://doi.org/10.1145/3167085},
  urldate = {2021-09-22},
  abstract = {We study different formalizations of finite sets in homotopy type theory to obtain a general definition that exhibits both the computational facilities and the proof principles expected from finite sets. We use higher inductive types to define the type K(A) of "finite sets over type A" \`a la Kuratowski without assuming that K(A) has decidable equality. We show how to define basic functions and prove basic properties after which we give two applications of our definition. On the foundational side, we use K to define the notions of "Kuratowski-finite type" and "Kuratowski-finite subobject", which we contrast with established notions, e.g. Bishop-finite types and enumerated types. We argue that Kuratowski-finiteness is the most general and flexible one of those and we define the usual operations on finite types and subobjects. From the computational perspective, we show how to use K(A) for an abstract interface for well-known finite set implementations such as tree- and list-like data structures. This implies that a function defined on a concrete finite sets implementation can be obtained from a function defined on the abstract finite sets K(A) and that correctness properties are inherited. Hence, HoTT is the ideal setting for data refinement. Beside this, we define bounded quantification, which lifts a decidable property on A to one on K(A).},
  isbn = {978-1-4503-5586-5},
  keywords = {Coq,finite sets,finite types,higher inductive types,homotopy type theory}
}

@online{gambinoMonoidalKleisliBicategories2022,
  title = {Monoidal {{Kleisli Bicategories}} and the {{Arithmetic Product}} of {{Coloured Symmetric Sequences}}},
  author = {Gambino, Nicola and Garner, Richard and Vasilakopoulou, Christina},
  date = {2022-06-14},
  eprint = {2206.06858},
  eprinttype = {arxiv},
  eprintclass = {math},
  url = {http://arxiv.org/abs/2206.06858},
  urldate = {2022-06-15},
  abstract = {We extend the arithmetic product of species of structures and symmetric sequences studied by Maia and M\textasciiacute endez and by Dwyer and Hess to coloured symmetric sequences and show that it determines a normal oplax monoidal structure on the bicategory of coloured symmetric sequences. In order to do this, we establish general results on extending monoidal structures to Kleisli bicategories. Our approach uses monoidal double categories, which help us to attack the difficult problem of verifying the coherence conditions for a monoidal bicategory in an efficient way.},
  langid = {english},
  pubstate = {preprint},
  keywords = {18N10 18N15 18M80 18C20 18M05,Mathematics - Algebraic Topology,Mathematics - Category Theory}
}

@article{girardLinearLogic1987,
  title = {Linear Logic},
  author = {Girard, Jean-Yves},
  date = {1987-01-01},
  journaltitle = {Theoretical Computer Science},
  shortjournal = {Theoretical Computer Science},
  volume = {50},
  number = {1},
  pages = {1--101},
  issn = {0304-3975},
  doi = {10.1016/0304-3975(87)90045-4},
  url = {https://www.sciencedirect.com/science/article/pii/0304397587900454},
  urldate = {2021-09-21},
  abstract = {The familiar connective of negation is broken into two operations: linear negation which is the purely negative part of negation and the modality ``of course'' which has the meaning of a reaffirmation. Following this basic discovery, a completely new approach to the whole area between constructive logics and programmation is initiated.},
  langid = {english}
}

@article{gylterudMultisetsTypeTheory2020,
  title = {Multisets in Type Theory},
  author = {Gylterud, H\aa kon Robbestad},
  date = {2020-07},
  journaltitle = {Mathematical Proceedings of the Cambridge Philosophical Society},
  volume = {169},
  number = {1},
  pages = {1--18},
  publisher = {Cambridge University Press},
  issn = {0305-0041, 1469-8064},
  doi = {10.1017/S0305004119000045},
  url = {https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/abs/multisets-in-type-theory/C17604B9927E477B70126529A2A91321},
  urldate = {2021-09-23},
  abstract = {A multiset consists of elements, but the notion of a multiset is distinguished from that of a set by carrying information of how many times each element occurs in a given multiset. In this work we will investigate the notion of iterative multisets, where multisets are iteratively built up from other multisets, in the context Martin--L\"of Type Theory, in the presence of Voevodsky's Univalence Axiom.In his 1978 paper, ``the type theoretic interpretation of constructive set theory'' Aczel introduced a model of constructive set theory in type theory, using a W-type quantifying over a universe, and an inductively defined equivalence relation on it. Our investigation takes this W-type and instead considers the identity type on it, which can be computed from the univalence axiom. Our thesis is that this gives a model of multisets. In order to demonstrate this, we adapt axioms of constructive set theory to multisets, and show that they hold for our model.},
  langid = {english},
  keywords = {03B15}
}

@inproceedings{hengleinSortingSearchingDistribution2013,
  title = {Sorting and {{Searching}} by {{Distribution}}: {{From Generic Discrimination}} to {{Generic Tries}}},
  shorttitle = {Sorting and {{Searching}} by {{Distribution}}},
  booktitle = {Programming {{Languages}} and {{Systems}}},
  author = {Henglein, Fritz and Hinze, Ralf},
  editor = {Shan, Chung-chieh},
  date = {2013},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {315--332},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-319-03542-0_23},
  abstract = {A discriminator partitions values associated with keys into groups listed in ascending order. Discriminators can be defined generically by structural recursion on representations of ordering relations. Employing type-indexed families we demonstrate how tries with an optimal-time lookup function can be constructed generically in worst-case linear time. We provide generic implementations of comparison, sorting, discrimination and trie building functions and give equational proofs of correctness that highlight core relations between these algorithms.},
  isbn = {978-3-319-03542-0},
  langid = {english},
  keywords = {Generic Discriminator,Order Representation,Proof Obligation,Radix Sort,Sorting Network}
}

@article{hengleinWhatSortingFunction2009,
  title = {What Is a {{Sorting Function}}?},
  author = {Henglein, Fritz},
  date = {2009-08},
  journaltitle = {The Journal of Logic and Algebraic Programming},
  shortjournal = {The Journal of Logic and Algebraic Programming},
  volume = {78},
  number = {7},
  pages = {552--572},
  issn = {15678326},
  doi = {10.1016/j.jlap.2008.12.003},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S1567832608001094},
  urldate = {2024-04-29},
  langid = {english}
}

@article{henningbasoldHigherInductiveTypes2017,
  title = {Higher {{Inductive Types}} in {{Programming}}},
  author = {Henning Basold and Herman Geuvers and Niels van der Weide},
  date = {2017},
  publisher = {Verlag der Technischen Universit\"at Graz},
  doi = {10.3217/JUCS-023-01-0063},
  url = {http://www.jucs.org/doi?doi=10.3217/jucs-023-01-0063},
  urldate = {2021-09-23}
}

@inproceedings{hinzeSortingBialgebrasDistributive2012,
  title = {Sorting with Bialgebras and Distributive Laws},
  booktitle = {Proceedings of the 8th {{ACM SIGPLAN}} Workshop on {{Generic}} Programming},
  author = {Hinze, Ralf and James, Daniel W.H. and Harper, Thomas and Wu, Nicolas and Magalh\~aes, Jos\'e Pedro},
  date = {2012-09-12},
  series = {{{WGP}} '12},
  pages = {69--80},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/2364394.2364405},
  url = {https://dl.acm.org/doi/10.1145/2364394.2364405},
  urldate = {2024-02-14},
  abstract = {Sorting algorithms are an intrinsic part of functional programming folklore as they exemplify algorithm design using folds and unfolds. This has given rise to an informal notion of duality among sorting algorithms: insertion sorts are dual to selection sorts. Using bialgebras and distributive laws, we formalise this notion within a categorical setting. We use types as a guiding force in exposing the recursive structure of bubble, insertion, selection, quick, tree, and heap sorts. Moreover, we show how to distill the computational essence of these algorithms down to one-step operations that are expressed as natural transformations. From this vantage point, the duality is clear, and one side of the algorithmic coin will neatly lead us to the other "for free". As an optimisation, the approach is also extended to paramorphisms and apomorphisms, which allow for more efficient implementations of these algorithms than the corresponding folds and unfolds.},
  isbn = {978-1-4503-1576-0},
  keywords = {algorithm design,apomorphisms,bialgebras,category theory,distributive laws,paramorphisms,sorting}
}

@article{hylandElementsTheoryAlgebraic2014,
  title = {Elements of a Theory of Algebraic Theories},
  author = {Hyland, J. Martin E.},
  date = {2014-08-01},
  journaltitle = {Theoretical Computer Science},
  shortjournal = {Theor. Comput. Sci.},
  volume = {546},
  pages = {132--144},
  issn = {0304-3975},
  doi = {10.1016/j.tcs.2014.03.005},
  url = {https://doi.org/10.1016/j.tcs.2014.03.005},
  urldate = {2021-09-22},
  abstract = {Kleisli bicategories are a natural environment in which the combinatorics involved in various notions of algebraic theory can be handled in a uniform way. The setting allows a clear account of comparisons between such notions. Algebraic theories, symmetric operads and nonsymmetric operads are treated as examples.},
  keywords = {Algebraic theories,Kleisli bicategories,Operads}
}

@article{hylandGlueingOrthogonalityModels2003,
  title = {Glueing and Orthogonality for Models of Linear Logic},
  author = {Hyland, Martin and Schalk, Andrea},
  date = {2003-02},
  journaltitle = {Theoretical Computer Science},
  shortjournal = {Theoretical Computer Science},
  volume = {294},
  number = {1-2},
  pages = {183--231},
  issn = {03043975},
  doi = {10.1016/S0304-3975(01)00241-9},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S0304397501002419},
  urldate = {2023-09-29},
  abstract = {We present the general theory of the method of glueing and associated technique of orthogonality for constructing categorical models of all the structure of linear logic: in particular we treat the exponentials in detail. We indicate simple applications of the methods and show that they cover familiar examples. c\copyright{} 2002 Elsevier Science B.V. All rights reserved.},
  langid = {english}
}

@article{hylandReasonsGeneralisingDomain2010,
  title = {Some Reasons for Generalising Domain Theory},
  author = {Hyland, J. Martin E.},
  date = {2010-04},
  journaltitle = {Mathematical Structures in Computer Science},
  shortjournal = {Math. Struct. Comp. Sci.},
  volume = {20},
  number = {2},
  pages = {239--265},
  issn = {0960-1295, 1469-8072},
  doi = {10.1017/S0960129509990375},
  url = {https://www.cambridge.org/core/product/identifier/S0960129509990375/type/journal_article},
  urldate = {2022-05-07},
  abstract = {Stone Duality (Taylor 2000; Taylor 2002a; Taylor 2002b), which is a further generalisation. There is a good deal to be learnt from each of these generalisations. However, in this paper I shall consider generalisations in a different spirit from any of the above: viz the generalisation from domains as posets to domains as categories. This is a very natural generalisation, and one with a long history. The first person to have taken the idea seriously seems to have been Daniel Lehmann, who gave a categorical version of the Smyth power domain (Lehmann 1976). Some time after Lehmann's work, and independently of it, a number of people looked at generalisations of domains for their own sake. The most systematic was Paul Taylor, who in the late 1980s gave categorical generalisations of much of the material of his thesis, Taylor (1986), and also of much analogous Stable Domain Theory. This work is largely unpublished, but some draft papers are available on Taylor's website. Other work of this period includes Coquand et al. (1989) in the stable tradition and Hyland and Pitts (1989) for the categorification of algebraic lattices.},
  langid = {english}
}

@inproceedings{joramConstructiveFinalSemantics2023,
  title = {Constructive {{Final Semantics}} of {{Finite Bags}}},
  booktitle = {{{DROPS-IDN}}/v2/Document/10.4230/{{LIPIcs}}.{{ITP}}.2023.20},
  author = {Joram, Philipp and Veltri, Niccol\`o},
  date = {2023},
  publisher = {Schloss-Dagstuhl - Leibniz Zentrum f\"ur Informatik},
  doi = {10.4230/LIPIcs.ITP.2023.20},
  url = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.ITP.2023.20},
  urldate = {2024-02-14},
  abstract = {Finitely-branching and unlabelled dynamical systems are typically modelled as coalgebras for the finite powerset functor. If states are reachable in multiple ways, coalgebras for the finite bag functor provide a more faithful representation. The final coalgebra of this functor is employed as a denotational domain for the evaluation of such systems. Elements of the final coalgebra are non-wellfounded trees with finite unordered branching, representing the evolution of systems starting from a given initial state. This paper is dedicated to the construction of the final coalgebra of the finite bag functor in homotopy type theory (HoTT). We first compare various equivalent definitions of finite bags employing higher inductive types, both as sets and as groupoids (in the sense of HoTT). We then analyze a few well-known, classical set-theoretic constructions of final coalgebras in our constructive setting. We show that, in the case of set-based definitions of finite bags, some constructions are intrinsically classical, in the sense that they are equivalent to some weak form of excluded middle. Nevertheless, a type satisfying the universal property of the final coalgebra can be constructed in HoTT employing the groupoid-based definition of finite bags. We conclude by discussing generalizations of our constructions to the wider class of analytic functors.},
  eventtitle = {14th {{International Conference}} on {{Interactive Theorem Proving}} ({{ITP}} 2023)},
  langid = {english}
}

@unpublished{kapulkinUnivalenceSimplicialSets2018,
  title = {Univalence in {{Simplicial Sets}}},
  author = {Kapulkin, Chris and Lumsdaine, Peter LeFanu and Voevodsky, Vladimir},
  date = {2018-10-29},
  eprint = {1203.2553},
  eprinttype = {arxiv},
  eprintclass = {math},
  url = {http://arxiv.org/abs/1203.2553},
  urldate = {2021-09-22},
  abstract = {We present an accessible account of Voevodsky's construction of a univalent universe of Kan fibrations.},
  keywords = {55U10 (Primary) 55U35 (Secondary),Mathematics - Algebraic Topology,Mathematics - Category Theory}
}

@article{kellyCoherenceCompactClosed1980,
  title = {Coherence for Compact Closed Categories},
  author = {Kelly, G. M. and Laplaza, M. L.},
  date = {1980-12-01},
  journaltitle = {Journal of Pure and Applied Algebra},
  shortjournal = {Journal of Pure and Applied Algebra},
  volume = {19},
  pages = {193--213},
  issn = {0022-4049},
  doi = {10.1016/0022-4049(80)90101-2},
  url = {https://www.sciencedirect.com/science/article/pii/0022404980901012},
  urldate = {2021-09-22},
  langid = {english}
}

@article{kellyUnifiedTreatmentTransfinite1980,
  title = {A Unified Treatment of Transfinite Constructions for Free Algebras, Free Monoids, Colimits, Associated Sheaves, and so On},
  author = {Kelly, G. M.},
  date = {1980-08},
  journaltitle = {Bulletin of the Australian Mathematical Society},
  volume = {22},
  number = {1},
  pages = {1--83},
  publisher = {Cambridge University Press},
  issn = {1755-1633, 0004-9727},
  doi = {10.1017/S0004972700006353},
  url = {https://www.cambridge.org/core/journals/bulletin-of-the-australian-mathematical-society/article/unified-treatment-of-transfinite-constructions-for-free-algebras-free-monoids-colimits-associated-sheaves-and-so-on/FE2E25E4959E4D8B4DE721718E7F55EE},
  urldate = {2024-02-14},
  abstract = {Many problems lead to the consideration of ``algebras'', given by an object A of a category A together with ``actions'' TkA {$\rightarrow$} A on A of one or more endofunctors of A, subjected to equational axioms. Such problems include those of free monads and free monoids, of cocompleteness in categories of monads and of monoids, of orthogonal subcategories (= generalized sheaf-categories), of categories of continuous functors, and so on; apart from problems involving the algebras for their own sake.Desirable properties of the category of algebras - existence of free ones, cocompleteness, existence of adjoints to algebraic functors - all follow if this category can be proved reflective in some well-behaved category: for which we choose a certain comma-category T/AWe show that the reflexion exists and is given as the colimit of a simple transfinite sequence, if A is cocomplete and the Tk preserve either colimits or unions of suitably-long chains of subobjects.The article draws heavily on the work of earlier authors, unifies and simplifies this, and extends it to new problems. Moreover the reflectivity in T/A is stronger than any earlier result, and will be applied in forthcoming articles, in an enriched version, to the study of categories with structure.},
  langid = {english}
}

@article{kidneyAlgebraicEffectsMeet2024,
  title = {Algebraic {{Effects Meet Hoare Logic}} in {{Cubical Agda}}},
  author = {Kidney, Donnacha Ois\'in and Yang, Zhixuan and Wu, Nicolas},
  date = {2024-01-05},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {8},
  pages = {1663--1695},
  issn = {2475-1421},
  doi = {10.1145/3632898},
  url = {https://dl.acm.org/doi/10.1145/3632898},
  urldate = {2024-02-26},
  abstract = {This paper presents a novel formalisation of algebraic effects with equations in Cubical Agda. Unlike previous work in the literature that employed               setoids               to deal with equations, the library presented here uses quotient types to faithfully encode the type of terms quotiented by laws. Apart from tools for equational reasoning, the library also provides an               effect-generic Hoare logic               for algebraic effects, which enables reasoning about effectful programs in terms of their pre- and post- conditions. A particularly novel aspect is that equational reasoning and Hoare-style reasoning are related by an elimination principle of Hoare logic.},
  issue = {POPL},
  langid = {english}
}

@article{kockMonadsSymmetricMonoidal1970,
  title = {Monads on Symmetric Monoidal Closed Categories},
  author = {Kock, Anders},
  date = {1970-12-01},
  journaltitle = {Archiv der Mathematik},
  shortjournal = {Arch. Math},
  volume = {21},
  number = {1},
  pages = {1--10},
  issn = {1420-8938},
  doi = {10.1007/BF01220868},
  url = {https://doi.org/10.1007/BF01220868},
  urldate = {2021-09-16},
  langid = {english}
}

@inproceedings{krausFreeHigherGroups2018,
  title = {Free {{Higher Groups}} in {{Homotopy Type Theory}}},
  booktitle = {Proceedings of the 33rd {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Kraus, Nicolai and Altenkirch, Thorsten},
  date = {2018-07-09},
  series = {{{LICS}}'18},
  pages = {599--608},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3209108.3209183},
  url = {https://doi.org/10.1145/3209108.3209183},
  urldate = {2021-09-18},
  abstract = {Given a type A in homotopy type theory (HoTT), we can define the free {$\infty$}-group on A as the loop space of the suspension of A + 1. Equivalently, this free higher group can be defined as a higher inductive type F(A) with constructors unit: F(A), cons: A\textasciitilde F(A)\textasciitilde F(A), and conditions saying that every cons(a) is an auto-equivalence on F(A). Assuming that A is a set (i.e. satisfies the principle of unique identity proofs), we are interested in the question whether F(A) is a set as well, which is very much related to an open problem in the HoTT book [22, Ex. 8.2]. We show an approximation to the question, namely that the fundamental groups of F(A) are trivial, i.e. that \textbar\textbar F(A)\textbar\textbar 1 is a set.},
  isbn = {978-1-4503-5583-4},
  keywords = {higher algebraic structures,homotopy type theory,truncation levels}
}

@inproceedings{kupkeFreshLookCommutativity2023,
  title = {A {{Fresh Look}} at~{{Commutativity}}: {{Free Algebraic Structures}} via~{{Fresh Lists}}},
  shorttitle = {A {{Fresh Look}} at~{{Commutativity}}},
  booktitle = {Programming {{Languages}} and {{Systems}}},
  author = {Kupke, Clemens and Forsberg, Fredrik Nordvall and Watters, Sean},
  editor = {Hur, Chung-Kil},
  date = {2023},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {135--154},
  publisher = {Springer Nature},
  location = {Singapore},
  doi = {10.1007/978-981-99-8311-7_7},
  abstract = {We show how types of free idempotent commutative monoids and free commutative monoids can be constructed in ordinary dependent type theory, without the need for quotient types or setoids, and prove that these constructions realise finite sets and multisets, respectively. Both constructions arise as generalisations of C.~Coquand's data type of fresh lists. We also show how many other free structures also can be realised by other instantiations. All of our results have been formalised in Agda.},
  isbn = {978-981-9983-11-7},
  langid = {english},
  keywords = {Dependent Type theory,Free algebraic structures}
}

@article{lafontLinearAbstractMachine1988,
  title = {The Linear Abstract Machine},
  author = {Lafont, Y.},
  date = {1988-07-01},
  journaltitle = {Theoretical Computer Science},
  shortjournal = {Theoretical Computer Science},
  volume = {59},
  number = {1},
  pages = {157--180},
  issn = {0304-3975},
  doi = {10.1016/0304-3975(88)90100-4},
  url = {https://www.sciencedirect.com/science/article/pii/0304397588901004},
  urldate = {2021-09-21},
  abstract = {Linear Logic [6] provides a refinement of functional programming and suggests a new implementation technique, with the following features: \&\#x02022;a synthesis of strict and lazy evaluation,\&\#x02022;a clean semantics of side effects,\&\#x02022;no garbage collector.},
  langid = {english}
}

@inproceedings{lairdWeightedRelationalModels2013,
  title = {Weighted {{Relational Models}} of {{Typed Lambda-Calculi}}},
  booktitle = {2013 28th {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Laird, Jim and Manzonetto, Giulio and McCusker, Guy and Pagani, Michele},
  date = {2013-06},
  pages = {301--310},
  issn = {1043-6871},
  doi = {10.1109/LICS.2013.36},
  abstract = {The category Rel of sets and relations yields one of the simplest denotational semantics of Linear Logic (LL). It is known that Rel is the biproduct completion of the Boolean ring. We consider the generalization of this construction to an arbitrary continuous semiring R, producing a cpo-enriched category which is a semantics of LL, and its (co)Kleisli category is an adequate model of an extension of PCF, parametrized by R. Specific instances of R allow us to compare programs not only with respect to ``what they can do'', but also ``in how many steps'' or ``in how many different ways'' (for non-deterministic PCF) or even ``with what probability'' (for probabilistic PCF).},
  eventtitle = {2013 28th {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  keywords = {Coherence,Computational modeling,denotational semantics,Equalizers,Games,lambda-calculus,linear logic,Probabilistic logic,quantitative semantics,Semantics,Tensile stress}
}

@article{lawvereMetricSpacesGeneralized1973,
  title = {Metric Spaces, Generalized Logic, and Closed Categories},
  author = {Lawvere, F. William},
  date = {1973-12-01},
  journaltitle = {Rendiconti del Seminario Matematico e Fisico di Milano},
  shortjournal = {Seminario Mat. e. Fis. di Milano},
  volume = {43},
  number = {1},
  pages = {135--166},
  issn = {1424-9294},
  doi = {10.1007/BF02924844},
  url = {https://doi.org/10.1007/BF02924844},
  urldate = {2021-09-21},
  abstract = {The analogy between dist (a, b)+dist (b, c){$\geq$}dist (a, c) and hom (A, B) {$\otimes$} hom (B, C){$\rightarrow$}hom (A, C) is rigorously developed to display many general results about metric spaces as consequences of a <<generalized pure logic>> whose <<truth-values>> are taken in an arbitrary closed category.},
  langid = {english}
}

@online{liQuotientTypesType2015,
  type = {Thesis (University of Nottingham only)},
  title = {Quotient Types in Type Theory},
  author = {Li, Nuo},
  date = {2015-07-15},
  publisher = {University of Nottingham},
  url = {http://eprints.nottingham.ac.uk/28941/},
  urldate = {2022-04-29},
  abstract = {Martin-Lof's intuitionistic type theory (Type Theory) is a formal system that serves not only as a foundation of constructive mathematics but also as a dependently typed programming language. Dependent types are types that depend on values of other types. Type Theory is based on the Curry-Howard isomorphism which relates computer programs with mathematical proofs so that we can do computer-aided formal reasoning and write certified programs in programming languages like Agda, Epigram etc. Martin Lof proposed two variants of Type Theory which are differentiated by the treatment of equality. In Intensional Type Theory, propositional equality defined by identity types does not imply definitional equality, and type checking is decidable. In Extensional Type Theory, propositional equality is identified with definitional equality which makes type checking undecidable. Because of the good computational properties, Intensional Type Theory is more popular, however it lacks some important extensional concepts such as functional extensionality and quotient types. This thesis is about quotient types. A quotient type is a new type whose equality is redefined by a given equivalence relation. However, in the usual formulation of Intensional Type Theory, there is no type former to create a quotient. We also lose canonicity if we add quotient types into Intensional Type Theory as axioms. In this thesis, we first investigate the expected syntax of quotient types and explain it with categorical notions. For quotients which can be represented as a setoid as well as defined as a set without a quotient type former, we propose to define an algebraic structure of quotients called definable quotients. It relates the setoid interpretation and the set definition via a normalisation function which returns a normal form (canonical choice) for each equivalence class. It can be seen as a simulation of quotient types and it helps theorem proving because we can benefit from both representations. However this approach cannot be used for all quotients. It seems that we cannot define a normalisation function for some quotients in Type Theory, e.g. Cauchy reals and finite multisets. Quotient types are indeed essential for formalisation of mathematics and reasoning of programs. Then we consider some models of Type Theory where types are interpreted as structured objects such as setoids, groupoids or weak omega-groupoids. In these models equalities are internalised into types which means that it is possible to redefine equalities. We present an implementation of Altenkirch's setoid model and show that quotient types can be defined within this model. We also describe a new extension of Martin-Lof type theory called Homotopy Type Theory where types are interpreted as weak omega-groupoids. It can be seen as a generalisation of the groupoid model which makes extensional concepts including quotient types available. We also introduce a syntactic encoding of weak omega-groupoids which can be seen as a first step towards building a weak omega-groupoids model in Intensional Type Theory. All of these implementations were performed in the dependently typed programming language Agda which is based on intensional Martin-Lof type theory.},
  langid = {english}
}

@online{loregianAutomataCoalgebrasCategories2024,
  title = {Automata and Coalgebras in Categories of Species},
  author = {Loregian, Fosco},
  date = {2024-01-08},
  eprint = {2401.04242},
  eprinttype = {arxiv},
  eprintclass = {cs, math},
  url = {http://arxiv.org/abs/2401.04242},
  urldate = {2024-01-10},
  abstract = {We study generalized automata (in the sense of Ad\textbackslash 'amek-Trnkov\textbackslash 'a) in Joyal's category of (set-valued) combinatorial species, and as an important preliminary step, we study coalgebras for its derivative endofunctor \$\textbackslash partial\$ and for the `Euler homogeneity operator' \$L\textbackslash circ\textbackslash partial\$ arising from the adjunction \$L\textbackslash dashv\textbackslash partial\textbackslash dashv R\$.},
  pubstate = {preprint},
  keywords = {Computer Science - Formal Languages and Automata Theory,Mathematics - Category Theory}
}

@article{lumsdaineSemanticsHigherInductive2020,
  title = {Semantics of Higher Inductive Types},
  author = {Lumsdaine, Peter Lefanu and Shulman, Michael},
  date = {2020-07},
  journaltitle = {Mathematical Proceedings of the Cambridge Philosophical Society},
  volume = {169},
  number = {1},
  pages = {159--208},
  publisher = {Cambridge University Press},
  issn = {0305-0041, 1469-8064},
  doi = {10.1017/S030500411900015X},
  url = {https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/semantics-of-higher-inductive-types/2C05BEB89E5E1BC81F68C38224737603},
  urldate = {2021-09-23},
  abstract = {Higher inductive types are a class of type-forming rules, introduced to provide basic (and not-so-basic) homotopy-theoretic constructions in a type-theoretic style. They have proven very fruitful for the ``synthetic'' development of homotopy theory within type theory, as well as in formalising ordinary set-level mathematics in type theory. In this paper, we construct models of a wide range of higher inductive types in a fairly wide range of settings.We introduce the notion of cell monad with parameters: a semantically-defined scheme for specifying homotopically well-behaved notions of structure. We then show that any suitable model category has weakly stable typal initial algebras for any cell monad with parameters. When combined with the local universes construction to obtain strict stability, this specialises to give models of specific higher inductive types, including spheres, the torus, pushout types, truncations, the James construction and general localisations.Our results apply in any sufficiently nice Quillen model category, including any right proper, simplicially locally cartesian closed, simplicial Cisinski model category (such as simplicial sets) and any locally presentable locally cartesian closed category (such as sets) with its trivial model structure. In particular, any locally presentable locally cartesian closed ({$\infty$}, 1)-category is presented by some model category to which our results apply.},
  langid = {english},
  keywords = {03B15,18C50,18G55}
}

@online{lurieHigherToposTheory2008,
  title = {Higher {{Topos Theory}}},
  author = {Lurie, Jacob},
  date = {2008-07-31},
  eprint = {math/0608040},
  eprinttype = {arxiv},
  doi = {10.48550/arXiv.math/0608040},
  url = {http://arxiv.org/abs/math/0608040},
  urldate = {2024-03-18},
  abstract = {This purpose of this book is twofold: to provide a general introduction to higher category theory (using the formalism of "quasicategories" or "weak Kan complexes"), and to apply this theory to the study of higher versions of Grothendieck topoi. A few applications to classical topology are included.},
  pubstate = {preprint},
  keywords = {55U40 (Primary) 18B25 (Secondary 18G30 (Secondary),Mathematics - Algebraic Topology,Mathematics - Category Theory}
}

@book{martin-lofIntuitionisticTypeTheory1984,
  title = {Intuitionistic Type Theory},
  author = {Martin-L\"of, Per and Sambin, Giovanni},
  date = {1984},
  series = {Studies in Proof Theory {{Lecture}} Notes},
  number = {1},
  publisher = {Bibliopolis},
  location = {Napoli},
  isbn = {978-88-7088-105-9},
  langid = {english},
  pagetotal = {91}
}

@software{mozlerCubicalAgdaSimple2021,
  title = {Cubical {{Agda}}: {{Simple Application}} of {{Fin}}: {{Lehmer Codes}}},
  author = {Mozler, Martin},
  date = {2021},
  url = {https://github. com/agda/cubical/blob/a1d2bb38c0794f3cb00610cd6061cf9b5410518d/Cubical/Data/Fin/LehmerCode.agda},
  organization = {Agda Github Community},
  annotation = {mozlerCubicalAgdaSimple}
}

@inproceedings{ongQuantitativeSemanticsLambda2017,
  title = {Quantitative Semantics of the Lambda Calculus: {{Some}} Generalisations of the Relational Model},
  shorttitle = {Quantitative Semantics of the Lambda Calculus},
  booktitle = {2017 32nd {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{LICS}})},
  author = {Ong, C.-H. Luke},
  date = {2017-06},
  pages = {1--12},
  doi = {10.1109/LICS.2017.8005064},
  abstract = {We present an overview of some recent work on the quantitative semantics of the {$\lambda$}-calculus. Our starting point is the fundamental degenerate model of linear logic, the relational model MRel. We show that three quantitative semantics of the simply-typed {$\lambda$}-calculus are equivalent: the relational semantics, HO/N game semantics, and the Taylor expansion semantics. We then consider two recent generalisations of the relational model: first, R-weighted relational models where R is a complete commutative semiring, as studied by Laird et al.; secondly, generalised species of structures, as introduced by Fiore et al. In each case, we briefly discuss some applications to quantitative analysis of higher-order programs.},
  eventtitle = {2017 32nd {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{LICS}})},
  keywords = {Calculus,Computational modeling,Computer languages,Games,Probabilistic logic,Semantics,Taylor series}
}

@book{piceghelloCoherenceMonoidalSymmetric2021,
  title = {Coherence for {{Monoidal}} and {{Symmetric Monoidal Groupoids}} in {{Homotopy Type Theory}}},
  author = {Piceghello, Stefano},
  date = {2021-12-03},
  publisher = {The University of Bergen},
  url = {https://bora.uib.no/bora-xmlui/handle/11250/2830640},
  urldate = {2022-04-29},
  abstract = {Homotopy Type Theory (HoTT) is a variant of Martin-L\"of Type Theory (MLTT) developed in such a way that types can be interpreted as infinity-groupoids, where the iterated construction of identity types represents the different layers of higher path space objects. HoTT can be used as a foundation of mathematics, and the proofs produced in its language can be verified with the aid of specific proof assistant software. In this thesis, we provide a formulation and a formalization of coherence theorems for monoidal and symmetric monoidal groupoids in HoTT.    In order to design 1-types FMG(X) and FSMG(X) representing the free monoidal and the free symmetric monoidal groupoid on a 0-type X of generators, we use higher inductive types (HITs), which apply the functionality of inductive definitions to the higher groupoid structure of types given by the identity types. Coherence for monoidal groupoids is established by showing a monoidal equivalence between FMG(X) and the 0-type list(X) of lists over X. For symmetric monoidal groupoids, we prove a symmetric monoidal equivalence between FSMG(X) and a simpler HIT slist(X) based on lists, whose paths and 2-paths make for an auxiliary symmetric structure on top of the monoidal structure already present on list(X).    Part of the thesis is devoted to the proof that the subuniverse BS\_* of finite types is equivalent to the type slist(1), where 1 is the unit type, and hence that the former is a free symmetric monoidal groupoid. As an intermediate step, we show a symmetric monoidal equivalence between slist(1) and an indexed HIT del\_* of deloopings of symmetric groups. The proof of a symmetric monoidal equivalence between del\_* and BS\_* rests on a few, unformalized statements. Assuming this equivalence, we are able to prove that, in a free symmetric monoidal groupoid, all diagrams involving symmetric monoidal expressions without repetitions commute.    This work is accompanied by a computer verification in the proof assistant Coq, which covers most of the results we present in this thesis.},
  isbn = {978-82-308-4711-4},
  langid = {english},
  annotation = {Accepted: 2021-11-22T09:09:54Z}
}

@article{piceghelloCoherenceSymmetricMonoidal2019,
  title = {Coherence for Symmetric Monoidal Groupoids in {{HoTT}}/{{UF}}},
  author = {Piceghello, Stefano},
  date = {2019},
  pages = {2},
  url = {http://www.ii.uib.no/~bezem/abstracts/TYPES_2019_paper_10},
  langid = {english},
  keywords = {No DOI found},
  annotation = {ZSCC: 0000003}
}

@inproceedings{seelyLinearLogicAutonomous1989,
  title = {Linear {{Logic}}, *-{{Autonomous Categories}} and {{Cofree Coalgebras}}},
  booktitle = {In {{Categories}} in {{Computer Science}} and {{Logic}}},
  author = {Seely, R. A. G.},
  date = {1989},
  pages = {371--382},
  publisher = {American Mathematical Society},
  abstract = {A brief outline of the categorical characterisation of Girard's linear logic is given, analagous to the relationship between cartesian closed categories and typed -calculus. The linear structure amounts to a -autonomous  category: a closed symmetric monoidal category G with finite products and a closed involution. Girard's exponential operator, ! , is a cotriple on G which carries the canonical comonoid structure on A with respect to cartesian product to a comonoid structure on !A with respect to tensor product. This makes the Kleisli category for ! cartesian closed.}
}

@inproceedings{tsukadaSpeciesProfunctorsTaylor2018,
  title = {Species, {{Profunctors}} and {{Taylor Expansion Weighted}} by {{SMCC}}: {{A Unified Framework}} for {{Modelling Nondeterministic}}, {{Probabilistic}} and {{Quantum Programs}}},
  shorttitle = {Species, {{Profunctors}} and {{Taylor Expansion Weighted}} by {{SMCC}}},
  booktitle = {Proceedings of the 33rd {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Tsukada, Takeshi and Asada, Kazuyuki and Ong, C.-H. Luke},
  date = {2018-07-09},
  pages = {889--898},
  publisher = {ACM},
  location = {Oxford United Kingdom},
  doi = {10.1145/3209108.3209157},
  url = {https://dl.acm.org/doi/10.1145/3209108.3209157},
  urldate = {2020-12-17},
  abstract = {Motivated by a tight connection between Joyal's combinatorial species and quantitative models of linear logic, this paper introduces weighted generalised species (or weighted profunctors), where weights are morphisms of a given symmetric monoidal closed category (SMCC). For each SMCC W, we show that the category of W-weighted profunctors is a Lafont category, a categorical model of linear logic with exponential. As a model of programming languages, the construction of this paper gives a uni ed framework that induces adequate models of nondeterministic, probabilistic, algebraic and quantum programming languages by an appropriate choice of the weight SMCC.},
  eventtitle = {{{LICS}} '18: 33rd {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  isbn = {978-1-4503-5583-4},
  langid = {english},
  annotation = {ZSCC: 0000014}
}

@book{univalentfoundationsprogramHomotopyTypeTheory2013,
  title = {Homotopy Type Theory: {{Univalent}} Foundations of Mathematics},
  author = {Univalent Foundations Program, The},
  date = {2013},
  publisher = {Univalent Foundations Program},
  location = {Institute for Advanced Study},
  url = {https://homotopytypetheory.org/book},
  annotation = {ZSCC: 0000005}
}

@article{veltriTypeTheoreticConstructionsFinal2021,
  title = {Type-{{Theoretic Constructions}} of the {{Final Coalgebra}} of the {{Finite Powerset Functor}}},
  author = {Veltri, Niccol\`o},
  namea = {Kobayashi, Naoki},
  nameatype = {collaborator},
  date = {2021},
  pages = {18 pages, 869597 bytes},
  publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f\"ur Informatik},
  issn = {1868-8969},
  doi = {10.4230/LIPICS.FSCD.2021.22},
  url = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.FSCD.2021.22},
  urldate = {2024-02-14},
  abstract = {The finite powerset functor is a construct frequently employed for the specification of nondeterministic transition systems as coalgebras. The final coalgebra of the finite powerset functor, whose elements characterize the dynamical behavior of transition systems, is a well-understood object which enjoys many equivalent presentations in set-theoretic foundations based on classical logic.},
  isbn = {9783959771917},
  langid = {english},
  keywords = {Cubical Agda,final coalgebra,finite powerset,Theory of computation  Constructive mathematics,Theory of computation  Type theory,type theory}
}

@article{vezzosiCubicalAgdaDependently2019,
  title = {Cubical Agda: A Dependently Typed Programming Language with Univalence and Higher Inductive Types},
  shorttitle = {Cubical Agda},
  author = {Vezzosi, Andrea and M\"ortberg, Anders and Abel, Andreas},
  date = {2019-07-26},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {3},
  pages = {87:1--87:29},
  doi = {10.1145/3341691},
  url = {https://doi.org/10.1145/3341691},
  urldate = {2021-06-29},
  abstract = {Proof assistants based on dependent type theory provide expressive languages for both programming and proving within the same system. However, all of the major implementations lack powerful extensionality principles for reasoning about equality, such as function and propositional extensionality. These principles are typically added axiomatically which disrupts the constructive properties of these systems. Cubical type theory provides a solution by giving computational meaning to Homotopy Type Theory and Univalent Foundations, in particular to the univalence axiom and higher inductive types. This paper describes an extension of the dependently typed functional programming language Agda with cubical primitives, making it into a full-blown proof assistant with native support for univalence and a general schema of higher inductive types. These new primitives make function and propositional extensionality as well as quotient types directly definable with computational content. Additionally, thanks also to copatterns, bisimilarity is equivalent to equality for coinductive types. This extends Agda with support for a wide range of extensionality principles, without sacrificing type checking and constructivity.},
  issue = {ICFP},
  keywords = {Cubical Type Theory,Dependent Pattern Matching,Higher Inductive Types,Univalence},
  annotation = {ZSCC: 0000002}
}

@unpublished{voevodskyResizingRulesTheir2011,
  title = {Resizing {{Rules}} - Their Use and Semantic Justification},
  author = {Voevodsky, Vladimir},
  date = {2011},
  url = {https://www.math.ias.edu/vladimir/sites/math.ias.edu.vladimir/files/2011_Bergen.pdf},
  eventtitle = {{{TYPES}}},
  venue = {Bergen}
}

@article{voevodskyUnivalentFoundationsProject2010,
  title = {Univalent Foundations Project},
  author = {Voevodsky, Vladimir},
  date = {2010},
  journaltitle = {NSF grant application},
  pages = {5--17},
  url = {https://www.math.ias.edu/~dgrayson/Voevodsky-old-files/files/files-annotated/Dropbox/For_the_web_site/univalent_foundations_project_for_website.pdf},
  urldate = {2024-03-18}
}

@article{wehrungTensorProductsStructures1996,
  title = {Tensor Products of Structures with Interpolation},
  author = {Wehrung, Friedrich},
  date = {1996-11-01},
  journaltitle = {Pacific Journal of Mathematics},
  shortjournal = {Pacific J. Math.},
  volume = {176},
  number = {1},
  pages = {267--285},
  issn = {0030-8730, 0030-8730},
  doi = {10.2140/pjm.1996.176.267},
  url = {http://msp.org/pjm/1996/176-1/p16.xhtml},
  urldate = {2022-06-24},
  langid = {english}
}

@article{yorgeyCombinatorialSpeciesLabelled2014a,
  title = {Combinatorial Species and Labelled Structures},
  author = {Yorgey, Brent Abraham},
  date = {2014-01-01},
  journaltitle = {Dissertations available from ProQuest},
  pages = {1--206},
  url = {https://repository.upenn.edu/dissertations/AAI3668177},
  keywords = {No DOI found},
  annotation = {ZSCC: 0000013}
}
