{-# OPTIONS --cubical --allow-unsolved-metas --exact-split -WnoUnsupportedIndexedMatch #-}

module Cubical.Structures.Set.CMon.SList.Sort.Sort where

open import Cubical.Foundations.Everything
open import Cubical.Data.Sigma
open import Cubical.Data.Nat
open import Cubical.Data.Nat.Order renaming (_‚â§_ to _‚â§‚Ñï_; _<_ to _<‚Ñï_)
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Maybe as Maybe
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Induction.WellFounded
open import Cubical.Relation.Binary
open import Cubical.Relation.Binary.Order 
open import Cubical.Relation.Nullary
open import Cubical.Relation.Nullary.HLevels
open import Cubical.Data.List
open import Cubical.HITs.PropositionalTruncation as P
import Cubical.Data.List as L
open import Cubical.Functions.Logic as L hiding (¬¨_; ‚ä•) 

import Cubical.Structures.Set.Mon.Desc as M
import Cubical.Structures.Set.CMon.Desc as M
import Cubical.Structures.Free as F
open import Cubical.Structures.Sig
open import Cubical.Structures.Str public
open import Cubical.Structures.Tree
open import Cubical.Structures.Eq
open import Cubical.Structures.Arity
open import Cubical.Structures.Set.Mon.List
open import Cubical.Structures.Set.CMon.SList.Base renaming (_‚à∑_ to _‚à∑*_; [] to []*; [_] to [_]*; _++_ to _++*_)
import Cubical.Structures.Set.CMon.SList.Base as S
open import Cubical.Structures.Set.CMon.SList.Length as S
open import Cubical.Structures.Set.CMon.SList.Membership as S
open import Cubical.Structures.Set.CMon.SList.Sort.Base

open Iso

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì

module Sort‚ÜíOrder (isSetA : isSet A) (sort : SList A -> List A) (sort‚â° : ‚àÄ xs -> list‚Üíslist (sort xs) ‚â° xs) where

  isSetMaybeA : isSet (Maybe A)
  isSetMaybeA = isOfHLevelMaybe 0 isSetA

  isSetListA : isSet (List A)
  isSetListA = isOfHLevelList 0 isSetA

  private
    module ùîñ = M.CMonSEq < SList A , slist-Œ± > slist-sat
  
  open Membership isSetA
  open Membership* isSetA
  open Sort isSetA sort
  open Sort.Section isSetA sort sort‚â°

  least : SList A -> Maybe A
  least xs = head-maybe (sort xs)

  least-nothing : ‚àÄ xs -> least xs ‚â° nothing -> xs ‚â° []*
  least-nothing xs p with sort xs | inspect sort xs
  ... | []     | [ q ]·µ¢ = sort-[] xs q
  ... | y ‚à∑ ys | [ q ]·µ¢ = ‚ä•.rec (¬¨just‚â°nothing p)

  least-Œ£ : ‚àÄ x xs -> least xs ‚â° just x -> Œ£[ ys ‚àà List A ] (sort xs ‚â° x ‚à∑ ys)
  least-Œ£ x xs p with sort xs
  ... | []     = ‚ä•.rec (¬¨nothing‚â°just p)
  ... | y ‚à∑ ys = ys , congS (_‚à∑ ys) (just-inj y x p)

  least-in : ‚àÄ x xs -> least xs ‚â° just x -> x ‚àà* xs
  least-in x xs p =
    let (ys , q) = least-Œ£ x xs p
        x‚à∑ys‚â°xs = congS list‚Üíslist (sym q) ‚àô sort‚â° xs
    in subst (x ‚àà*_) x‚à∑ys‚â°xs (x‚àà*xs x (list‚Üíslist ys))

  least-choice : ‚àÄ x y -> (least (x ‚à∑* [ y ]*) ‚â° just x) ‚äî‚Ä≤ (least (x ‚à∑* [ y ]*) ‚â° just y)
  least-choice x y = P.rec squash‚ÇÅ
    (‚äé.rec
      (L.inl ‚àò congS head-maybe)
      (L.inr ‚àò congS head-maybe)
    )
    (sort-choice x y)

  _‚â§_ : A -> A -> Type _
  x ‚â§ y = least (x ‚à∑* y ‚à∑* []*) ‚â° just x

  isProp-‚â§ : ‚àÄ {a} {b} -> isProp (a ‚â§ b)
  isProp-‚â§  = isSetMaybeA _ _

  ‚â§-Prop : ‚àÄ x y -> hProp _
  ‚â§-Prop x y = (x ‚â§ y) , isProp-‚â§

  refl-‚â§ : ‚àÄ x -> x ‚â§ x
  refl-‚â§ x = P.rec isProp-‚â§ (‚äé.rec (idfun _) (idfun _)) (least-choice x x)

  antisym-‚â§ : ‚àÄ x y -> x ‚â§ y -> y ‚â§ x -> x ‚â° y
  antisym-‚â§ x y p q = P.rec (isSetA x y)
    (‚äé.rec
      (Œª xy -> just-inj x y $
        just x ‚â°‚ü® sym xy ‚ü©
        least (x ‚à∑* y ‚à∑* []*) ‚â°‚ü® congS least (swap x y []*) ‚ü©
        least (y ‚à∑* x ‚à∑* []*) ‚â°‚ü® q ‚ü©
        just y
      ‚àé)
      (Œª yx -> just-inj x y $
        just x ‚â°‚ü® sym p ‚ü©
        least (x ‚à∑* [ y ]*) ‚â°‚ü® yx ‚ü©
        just y
      ‚àé))
     (least-choice x y)

  total-‚â§ : ‚àÄ x y -> (x ‚â§ y) ‚äî‚Ä≤ (y ‚â§ x)
  total-‚â§ x y = P.rec squash‚ÇÅ
    (‚äé.rec
      L.inl
      (Œª p -> L.inr $
        least (y ‚à∑* [ x ]*) ‚â°‚ü® congS least (swap y x []*) ‚ü©
        least (x ‚à∑* [ y ]*) ‚â°‚ü® p ‚ü©
        just y
      ‚àé))
    (least-choice x y)

  dec-‚â§ : (discA : Discrete A) -> ‚àÄ x y -> Dec (x ‚â§ y)
  dec-‚â§ discA x y = discreteMaybe discA _ _

  is-sorted‚Üí‚â§ : ‚àÄ x y -> is-sorted (x ‚à∑ y ‚à∑ []) -> x ‚â§ y
  is-sorted‚Üí‚â§ x y = P.rec (isSetMaybeA _ _) Œª (xs , p) ->
    congS head-maybe (congS sort (sym (sym (sort‚â° xs) ‚àô congS list‚Üíslist p)) ‚àô p)

  module _ (sort-is-sort : is-sort) where
    trans-‚â§ : ‚àÄ x y z -> x ‚â§ y -> y ‚â§ z -> x ‚â§ z
    trans-‚â§ x y z x‚â§y y‚â§z with least (x ‚à∑* y ‚à∑* z ‚à∑* []*) | inspect least (x ‚à∑* y ‚à∑* z ‚à∑* []*)
    ... | nothing | [ p ]·µ¢ = ‚ä•.rec (snotz (congS S.length (least-nothing _ p)))
    ... | just u | [ p ]·µ¢ =
      P.rec (isSetMaybeA _ _)
        (‚äé.rec case1 
          (P.rec (isSetMaybeA _ _)
            (‚äé.rec case2 (case3 ‚àò x‚àà[y]‚Üíx‚â°y _ _))
          )
        )
        (least-in u (x ‚à∑* y ‚à∑* z ‚à∑* []*) p)
      where
      tail' : Œ£[ xs ‚àà List A ] u ‚à∑ xs ‚â° sort (x ‚à∑* y ‚à∑* z ‚à∑* []*)
      tail' with sort (x ‚à∑* y ‚à∑* z ‚à∑* []*)
      ... | [] = ‚ä•.rec (¬¨nothing‚â°just p)
      ... | v ‚à∑ xs = xs , congS (_‚à∑ xs) (just-inj _ _ (sym p))
      tail : List A
      tail = tail' .fst
      tail-proof : u ‚à∑ tail ‚â° sort (x ‚à∑* y ‚à∑* z ‚à∑* []*)
      tail-proof = tail' .snd
      u‚à∑tail-is-sorted : is-sorted (u ‚à∑ tail)
      u‚à∑tail-is-sorted = ‚à£ ((x ‚à∑* y ‚à∑* z ‚à∑* []*) , sym tail-proof) ‚à£‚ÇÅ
      u-is-smallest : ‚àÄ v -> v ‚àà* (x ‚à∑* y ‚à∑* z ‚à∑* []*) -> u ‚â§ v
      u-is-smallest v = {!   !}
      case1 : u ‚â° x -> x ‚â§ z
      case1 u‚â°x = subst (_‚â§ z) u‚â°x (u-is-smallest z (L.inr (L.inr (L.inl refl))))
      case2 : u ‚â° y -> x ‚â§ z
      case2 u‚â°y = subst (_‚â§ z) (antisym-‚â§ y x y‚â§x x‚â§y) y‚â§z
        where
        y‚â§x : y ‚â§ x
        y‚â§x = subst (_‚â§ x) u‚â°y (u-is-smallest x (L.inl refl))
      case3 : u ‚â° z -> x ‚â§ z
      case3 u‚â°z = subst (x ‚â§_) (antisym-‚â§ y z y‚â§z z‚â§y) x‚â§y
        where
        z‚â§y : z ‚â§ y
        z‚â§y = subst (_‚â§ y) u‚â°z (u-is-smallest y (L.inr (L.inl refl)))

    ‚â§-isToset : IsToset _‚â§_
    IsToset.is-set ‚â§-isToset = isSetA
    IsToset.is-prop-valued ‚â§-isToset x y = isOfHLevelMaybe 0 isSetA _ _
    IsToset.is-refl ‚â§-isToset = refl-‚â§
    IsToset.is-trans ‚â§-isToset = trans-‚â§ 
    IsToset.is-antisym ‚â§-isToset = antisym-‚â§                
    IsToset.is-strongly-connected ‚â§-isToset = total-‚â§

    sort-tail : ‚àÄ x xs -> is-sorted (x ‚à∑ xs) -> is-sorted xs
    sort-tail x ys p = sort-is-sort x [] ys p

    sort-head2 : ‚àÄ x y xs -> is-sorted (x ‚à∑ y ‚à∑ xs) -> is-sorted (x ‚à∑ y ‚à∑ [])
    sort-head2 x y [] p = p
    sort-head2 x y (z ‚à∑ zs) p = sort-head2 x y zs (sort-is-sort z (x ‚à∑ y ‚à∑ []) zs p)
