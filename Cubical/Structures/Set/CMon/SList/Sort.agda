{-# OPTIONS --cubical --safe --exact-split #-}

module Cubical.Structures.Set.CMon.SList.Sort where

open import Cubical.Foundations.Everything
open import Cubical.Data.Sigma
open import Cubical.Data.Nat
open import Cubical.Data.Nat.Order renaming (_‚â§_ to _‚â§‚Ñï_)
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Maybe as Maybe
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Induction.WellFounded
open import Cubical.Relation.Binary
open import Cubical.Relation.Binary.Order 
open import Cubical.Relation.Nullary
open import Cubical.Data.List
open import Cubical.HITs.PropositionalTruncation as P
import Cubical.Data.List as L

import Cubical.Structures.Set.Mon.Desc as M
import Cubical.Structures.Set.CMon.Desc as M
import Cubical.Structures.Free as F
open import Cubical.Structures.Sig
open import Cubical.Structures.Str public
open import Cubical.Structures.Tree
open import Cubical.Structures.Eq
open import Cubical.Structures.Arity
open import Cubical.Structures.Set.Mon.List
open import Cubical.Structures.Set.CMon.SList.Base renaming (_‚à∑_ to _‚à∑*_; [] to []*; [_] to [_]*; _++_ to _++*_)
import Cubical.Structures.Set.CMon.SList.Base as S
open import Cubical.Structures.Set.CMon.SList.Length as S

open Iso

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì

list‚Üíslist-Hom : structHom < List A , list-Œ± > < SList A , slist-Œ± >
list‚Üíslist-Hom = ListDef.Free.ext listDef trunc (M.cmonSatMon slist-sat) S.[_]

list‚Üíslist : List A -> SList A
list‚Üíslist = list‚Üíslist-Hom .fst

head-maybe : List A -> Maybe A
head-maybe [] = nothing
head-maybe (x ‚à∑ xs) = just x

module Sort‚ÜíOrder (discreteA : Discrete A) (sort : SList A -> List A) (sort‚â° : ‚àÄ xs -> list‚Üíslist (sort xs) ‚â° xs) where

  private
    module ùîñ = M.CMonSEq < SList A , slist-Œ± > slist-sat

  isSetA : isSet A
  isSetA = Discrete‚ÜíisSet discreteA

  private
    list‚Üíslist-Œ∑ : ‚àÄ xs -> (x : A) -> list‚Üíslist xs ‚â° [ x ]* -> xs ‚â° [ x ]
    list‚Üíslist-Œ∑ [] x p = ‚ä•.rec (znots (congS S.length p))
    list‚Üíslist-Œ∑ (x ‚à∑ []) y p = congS [_] ([-]-inj {œï = isSetA} p)
    list‚Üíslist-Œ∑ (x ‚à∑ y ‚à∑ xs) z p = ‚ä•.rec (snotz (injSuc (congS S.length p)))

    sort-length‚â°-Œ± : ‚àÄ (xs : List A) -> L.length xs ‚â° S.length (list‚Üíslist xs)
    sort-length‚â°-Œ± [] = refl
    sort-length‚â°-Œ± (x ‚à∑ xs) = congS suc (sort-length‚â°-Œ± xs)

    sort-length‚â° : ‚àÄ xs -> L.length (sort xs) ‚â° S.length xs
    sort-length‚â° xs = sort-length‚â°-Œ± (sort xs) ‚àô congS S.length (sort‚â° xs)

    length-0 : ‚àÄ (xs : List A) -> L.length xs ‚â° 0 -> xs ‚â° []
    length-0 [] p = refl
    length-0 (x ‚à∑ xs) p = ‚ä•.rec (snotz p)

    sort-[] : ‚àÄ xs -> sort xs ‚â° [] -> xs ‚â° []*
    sort-[] xs p = sym (sort‚â° xs) ‚àô congS list‚Üíslist p

    sort-[]' : sort []* ‚â° []
    sort-[]' = length-0 (sort []*) (sort-length‚â° []*)

    sort-[-] : ‚àÄ x -> sort [ x ]* ‚â° [ x ]
    sort-[-] x = list‚Üíslist-Œ∑ (sort [ x ]*) x (sort‚â° [ x ]*)

    list‚Üíslist-[] : (xs : List A) -> list‚Üíslist xs ‚â° []* -> xs ‚â° []
    list‚Üíslist-[] [] p = refl
    list‚Üíslist-[] (x ‚à∑ xs) p = ‚ä•.rec (snotz (congS S.length p))

  least : SList A -> Maybe A
  least xs = head-maybe (sort xs)

  _‚àà*_ : A -> SList A -> Type _
  x ‚àà* xs = 0 < (FMScount discreteA x xs)

  private
    ‚àà*-‚à∑-Œ± : ‚àÄ x y xs -> x ‚â° y -> x ‚àà* xs -> x ‚àà* (y ‚à∑* xs)
    ‚àà*-‚à∑-Œ± x y xs p q = <-trans q lemma-Œ≤
      where
      lemma-Œ± : FMScount discreteA x (y ‚à∑* xs) ‚â° suc (FMScount discreteA x xs)
      lemma-Œ± = FMScount-‚â°-lemma discreteA xs p
      lemma-Œ≤ : FMScount discreteA x xs < FMScount discreteA x (y ‚à∑* xs)
      lemma-Œ≤ = subst (FMScount discreteA x xs <_) (sym lemma-Œ±) ‚â§-refl
    ‚àà*-‚à∑-Œ≤ : ‚àÄ x y xs -> ¬¨(x ‚â° y) -> x ‚àà* xs -> x ‚àà* (y ‚à∑* xs)
    ‚àà*-‚à∑-Œ≤ x y xs p q = subst (0 <_) (sym lemma) q
      where
      lemma : FMScount discreteA x (y ‚à∑* xs) ‚â° FMScount discreteA x xs
      lemma = FMScount-‚â¢-lemma discreteA xs p

  ‚àà*-‚à∑ : ‚àÄ x y xs -> x ‚àà* xs -> x ‚àà* (y ‚à∑* xs)
  ‚àà*-‚à∑ x y xs p = decRec
    (Œª q -> ‚àà*-‚à∑-Œ± x y xs q p)
    (Œª q -> ‚àà*-‚à∑-Œ≤ x y xs q p)
    (discreteA x y)

  ‚àà*-++ : ‚àÄ x xs ys -> x ‚àà* ys -> x ‚àà* (xs ++* ys)
  ‚àà*-++ x xs ys p =
    ElimProp.f {B = Œª zs -> x ‚àà* (zs ++* ys)} isProp‚â§ p
      (Œª z {zs} q -> ‚àà*-‚à∑ x z (zs ++* ys) q)
      xs

  x‚ààx‚à∑xs : ‚àÄ x xs -> x ‚àà* (x ‚à∑* xs)
  x‚ààx‚à∑xs x xs = ‚â§<-trans zero-‚â§ lemma
    where
    lemma : FMScount discreteA x xs < FMScount discreteA x (x ‚à∑* xs)
    lemma = 0 , sym (FMScount-‚â°-lemma-refl discreteA xs)

  x‚àà[x] : ‚àÄ x -> x ‚àà* [ x ]*
  x‚àà[x] x = x‚ààx‚à∑xs x []*

  list‚Üíslist-‚àà* : ‚àÄ x xs -> x ‚àà* list‚Üíslist (x ‚à∑ xs)
  list‚Üíslist-‚àà* x xs = subst (x ‚àà*_) lemma x‚ààxs++x
    where
    x‚ààxs++x : x ‚àà* (list‚Üíslist xs ++* [ x ]*)
    x‚ààxs++x = ‚àà*-++ x (list‚Üíslist xs) [ x ]* (x‚àà[x] x)
    lemma : list‚Üíslist xs ++* [ x ]* ‚â° list‚Üíslist (x ‚à∑ xs)
    lemma = sym (ùîñ.comm [ x ]* (list‚Üíslist xs))

  least-in : ‚àÄ x xs -> least xs ‚â° just x -> x ‚àà* xs
  least-in x xs p with sort xs | inspect sort xs
  ... | []     | _      = ‚ä•.rec (¬¨nothing‚â°just p)
  ... | y ‚à∑ ys | [ q ]·µ¢ = subst (_‚àà* xs) (just-inj y x p) y‚ààxs
    where
    y‚à∑ys‚â°xs : list‚Üíslist (y ‚à∑ ys) ‚â° xs
    y‚à∑ys‚â°xs = congS list‚Üíslist (sym q) ‚àô sort‚â° xs
    y‚ààxs : y ‚àà* xs
    y‚ààxs = subst (y ‚àà*_) y‚à∑ys‚â°xs (list‚Üíslist-‚àà* y ys)

  ‚àà*-remove1 : ‚àÄ x y xs -> x ‚àà* xs -> ¬¨(x ‚â° y) -> x ‚àà* remove1 discreteA y xs
  ‚àà*-remove1 x y xs p q = subst (0 <_) lemma p
    where
    lemma : FMScount discreteA x xs ‚â° FMScount discreteA x (remove1 discreteA y xs)
    lemma = sym (FMScount-remove1-‚â¢-lemma discreteA xs q)

  ¬¨‚àà[] : ‚àÄ x -> ¬¨(x ‚àà* []*)
  ¬¨‚àà[] x p = snotz (‚â§0‚Üí‚â°0 p)

  least-nothing : ‚àÄ xs -> least xs ‚â° nothing -> xs ‚â° []*
  least-nothing xs p with sort xs | inspect sort xs
  ... | []     | [ q ]·µ¢ = sort-[] xs q
  ... | y ‚à∑ ys | [ q ]·µ¢ = ‚ä•.rec (¬¨just‚â°nothing p)

  ¬¨least-nothing : ‚àÄ x xs -> ¬¨(least (x ‚à∑* xs) ‚â° nothing)
  ¬¨least-nothing x xs p = snotz (congS S.length (least-nothing (x ‚à∑* xs) p))

  least-choice : ‚àÄ x y -> (least (x ‚à∑* [ y ]*) ‚â° just x) ‚äé (least (x ‚à∑* [ y ]*) ‚â° just y)
  least-choice x y with (discreteMaybe discreteA) (least (x ‚à∑* [ y ]*)) (just x)
  ... | yes p = inl p
  ... | no ¬¨p with (discreteMaybe discreteA) (least (x ‚à∑* [ y ]*)) (just y)
  ... | yes q = inr q
  ... | no ¬¨q with least (x ‚à∑* [ y ]*) | inspect least (x ‚à∑* [ y ]*)
  ... | nothing | [ r ]·µ¢ = ‚ä•.rec (¬¨least-nothing x [ y ]* r)
  ... | just z  | [ r ]·µ¢ = ‚ä•.rec (¬¨‚àà[] z smallest‚ààŒ≤)
    where
    remove1-Œ± : remove1 discreteA x (x ‚à∑* [ y ]*) ‚â° [ y ]*
    remove1-Œ± with discreteA x x
    ... | yes r = refl
    ... | no ¬¨r = ‚ä•.rec (¬¨r refl)
    smallest‚ààŒ± : z ‚àà* [ y ]*
    smallest‚ààŒ± = subst (z ‚àà*_) remove1-Œ± (‚àà*-remove1 z x (x ‚à∑* [ y ]*) (least-in z (x ‚à∑* [ y ]*) r) (¬¨p ‚àò congS just))
    remove1-Œ≤ : remove1 discreteA y [ y ]* ‚â° []*
    remove1-Œ≤ with discreteA y y
    ... | yes r = refl
    ... | no ¬¨r = ‚ä•.rec (¬¨r refl)
    smallest‚ààŒ≤ : z ‚àà* []*
    smallest‚ààŒ≤ = subst (z ‚àà*_) remove1-Œ≤ (‚àà*-remove1 z y [ y ]* smallest‚ààŒ± (¬¨q ‚àò congS just))

  sort-cons : ‚àÄ x xs -> sort (x ‚à∑* list‚Üíslist xs) ‚â° x ‚à∑ xs -> sort (list‚Üíslist xs) ‚â° xs
  sort-cons x [] p = sort-[]'
  sort-cons x (y ‚à∑ ys) p = {!   !}
    where
    IH : sort (list‚Üíslist ys) ‚â° ys
    IH = sort-cons y ys {!   !}

  -- sort-cons : ‚àÄ x xs -> least xs ‚â° just x -> sort xs ‚â° x ‚à∑ sort (remove1 discreteA x xs)
  -- sort-cons x xs p with sort xs | inspect sort xs
  -- ... | []         | _      = ‚ä•.rec (¬¨nothing‚â°just p)
  -- ... | y ‚à∑ []     | [ q ]·µ¢ = cong‚ÇÇ _‚à∑_ (just-inj y x p) {!   !}
  -- ... | y ‚à∑ z ‚à∑ ys | [ q ]·µ¢ = cong‚ÇÇ _‚à∑_ (just-inj y x p) {!   !}
  --   where
  --   IH : sort (z ‚à∑* list‚Üíslist ys) ‚â° z ‚à∑ sort (remove1 discreteA z (z ‚à∑* list‚Üíslist ys))
  --   IH = {!   !}
  --   xs‚â°yzys : xs ‚â° y ‚à∑* z ‚à∑* list‚Üíslist ys
  --   xs‚â°yzys =
  --     xs ‚â°‚ü® sym (sort‚â° xs) ‚ü©
  --     list‚Üíslist (sort xs) ‚â°‚ü® congS list‚Üíslist q ‚ü©
  --     list‚Üíslist (y ‚à∑ z ‚à∑ ys) ‚àé
  --   lemma-Œ± : remove1 discreteA x (y ‚à∑* z ‚à∑* list‚Üíslist ys) ‚â° z ‚à∑* list‚Üíslist ys
  --   lemma-Œ± with discreteA x y
  --   ... | no ¬¨r = ‚ä•.rec (¬¨r (just-inj x y (sym p)))
  --   ... | yes r = refl
  --   lemma-Œ≤ : remove1 discreteA x xs ‚â° z ‚à∑* list‚Üíslist ys
  --   lemma-Œ≤ = congS (remove1 discreteA x) xs‚â°yzys ‚àô lemma-Œ±
  --   lemma-Œ≥ : sort (z ‚à∑* list‚Üíslist ys) ‚â° z ‚à∑ ys
  --   lemma-Œ≥ =
  --     sort (z ‚à∑* list‚Üíslist ys) ‚â°‚ü® IH ‚ü©
  --     z ‚à∑ sort (remove1 discreteA z (z ‚à∑* list‚Üíslist ys)) ‚â°‚ü® congS (Œª w -> z ‚à∑ sort w) (sym (remove1-‚â°-lemma discreteA (list‚Üíslist ys) refl)) ‚ü©
  --     z ‚à∑ sort (list‚Üíslist ys) ‚â°‚ü®‚ü©
  --     {!   !}

  least-remove : ‚àÄ x y z -> least (x ‚à∑* y ‚à∑* [ z ]*) ‚â° just x -> least (x ‚à∑* [ y ]*) ‚â° just x
  least-remove x y z p = {!   !}

  least-add : ‚àÄ x y z -> least (x ‚à∑* [ y ]*) ‚â° just x
              -> (least (x ‚à∑* y ‚à∑* [ z ]*) ‚â° just x) ‚äé (least (x ‚à∑* y ‚à∑* [ z ]*) ‚â° just z) 
  least-add x y z p = {!   !}

  _‚â§_ : A -> A -> Type _
  x ‚â§ y = least (x ‚à∑* y ‚à∑* []*) ‚â° just x

  refl-‚â§ : ‚àÄ x -> x ‚â§ x
  refl-‚â§ x = ‚äé.rec (Œª p -> p) (Œª p -> p) (least-choice x x)

  trans-‚â§ : ‚àÄ x y z -> x ‚â§ y -> y ‚â§ z -> x ‚â§ z
  trans-‚â§ x y z p q = {!   !}

  antisym-‚â§ : ‚àÄ x y -> x ‚â§ y -> y ‚â§ x -> x ‚â° y
  antisym-‚â§ x y p q = ‚äé.rec
    (Œª xy -> just-inj x y $
      just x ‚â°‚ü® sym xy ‚ü©
      least (x ‚à∑* y ‚à∑* []*) ‚â°‚ü® congS least (swap x y []*) ‚ü©
      least (y ‚à∑* x ‚à∑* []*) ‚â°‚ü® q ‚ü©
      just y
    ‚àé)
    (Œª yx -> just-inj x y $
      just x ‚â°‚ü® sym p ‚ü©
      least (x ‚à∑* [ y ]*) ‚â°‚ü® yx ‚ü©
      just y
    ‚àé)
    (least-choice x y)

  total-‚â§ : ‚àÄ x y -> (x ‚â§ y) ‚äé (y ‚â§ x)
  total-‚â§ x y = ‚äé.rec
    (Œª p -> inl p)
    (Œª p -> inr $
      least (y ‚à∑* [ x ]*) ‚â°‚ü® congS least (swap y x []*) ‚ü©
      least (x ‚à∑* [ y ]*) ‚â°‚ü® p ‚ü©
      just y
    ‚àé)
    (least-choice x y)

  dec-‚â§ : ‚àÄ x y -> (x ‚â§ y) ‚äé (¬¨(x ‚â§ y))
  dec-‚â§ x y = decRec inl inr ((discreteMaybe discreteA) (least (x ‚à∑* y ‚à∑* []*)) (just x))

  ‚â§-isToset : IsToset _‚â§_
  IsToset.is-set ‚â§-isToset = isSetA
  IsToset.is-prop-valued ‚â§-isToset x y = isOfHLevelMaybe 0 isSetA _ _
  IsToset.is-refl ‚â§-isToset = refl-‚â§
  IsToset.is-trans ‚â§-isToset = trans-‚â§
  IsToset.is-antisym ‚â§-isToset = antisym-‚â§
  IsToset.is-strongly-connected ‚â§-isToset x y = ‚à£ total-‚â§ x y ‚à£‚ÇÅ 