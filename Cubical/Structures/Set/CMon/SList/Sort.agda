{-# OPTIONS --cubical --safe --exact-split #-}

module Cubical.Structures.Set.CMon.SList.Sort where

open import Cubical.Foundations.Everything
open import Cubical.Data.Sigma
open import Cubical.Data.Nat
open import Cubical.Data.Nat.Order renaming (_‚â§_ to _‚â§‚Ñï_)
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Maybe as Maybe
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Induction.WellFounded
open import Cubical.Relation.Binary
open import Cubical.Relation.Binary.Order 
open import Cubical.Relation.Nullary
open import Cubical.Data.List
open import Cubical.HITs.PropositionalTruncation as P
import Cubical.Data.List as L
open import Cubical.Functions.Logic as L

import Cubical.Structures.Set.Mon.Desc as M
import Cubical.Structures.Set.CMon.Desc as M
import Cubical.Structures.Free as F
open import Cubical.Structures.Sig
open import Cubical.Structures.Str public
open import Cubical.Structures.Tree
open import Cubical.Structures.Eq
open import Cubical.Structures.Arity
open import Cubical.Structures.Set.Mon.List
open import Cubical.Structures.Set.CMon.SList.Base renaming (_‚à∑_ to _‚à∑*_; [] to []*; [_] to [_]*; _++_ to _++*_)
import Cubical.Structures.Set.CMon.SList.Base as S
open import Cubical.Structures.Set.CMon.SList.Length as S
open import Cubical.Structures.Set.CMon.SList.Membership as S

open Iso

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì

list‚Üíslist-Hom : structHom < List A , list-Œ± > < SList A , slist-Œ± >
list‚Üíslist-Hom = ListDef.Free.ext listDef trunc (M.cmonSatMon slist-sat) S.[_]

list‚Üíslist : List A -> SList A
list‚Üíslist = list‚Üíslist-Hom .fst

head-maybe : List A -> Maybe A
head-maybe [] = nothing
head-maybe (x ‚à∑ xs) = just x

module Sort‚ÜíOrder (isSetA : isSet A) (sort : SList A -> List A) (sort‚â° : ‚àÄ xs -> list‚Üíslist (sort xs) ‚â° xs) where

  isSetMaybeA : isSet (Maybe A)
  isSetMaybeA = isOfHLevelMaybe 0 isSetA

  private
    module ùîñ = M.CMonSEq < SList A , slist-Œ± > slist-sat
  
  open S.Membership isSetA

  private
    list‚Üíslist-Œ∑ : ‚àÄ xs -> (x : A) -> list‚Üíslist xs ‚â° [ x ]* -> xs ‚â° [ x ]
    list‚Üíslist-Œ∑ [] x p = ‚ä•.rec (znots (congS S.length p))
    list‚Üíslist-Œ∑ (x ‚à∑ []) y p = congS [_] ([-]-inj {œï = isSetA} p)
    list‚Üíslist-Œ∑ (x ‚à∑ y ‚à∑ xs) z p = ‚ä•.rec (snotz (injSuc (congS S.length p)))

    sort-length‚â°-Œ± : ‚àÄ (xs : List A) -> L.length xs ‚â° S.length (list‚Üíslist xs)
    sort-length‚â°-Œ± [] = refl
    sort-length‚â°-Œ± (x ‚à∑ xs) = congS suc (sort-length‚â°-Œ± xs)

    sort-length‚â° : ‚àÄ xs -> L.length (sort xs) ‚â° S.length xs
    sort-length‚â° xs = sort-length‚â°-Œ± (sort xs) ‚àô congS S.length (sort‚â° xs)

    length-0 : ‚àÄ (xs : List A) -> L.length xs ‚â° 0 -> xs ‚â° []
    length-0 [] p = refl
    length-0 (x ‚à∑ xs) p = ‚ä•.rec (snotz p)

    sort-[] : ‚àÄ xs -> sort xs ‚â° [] -> xs ‚â° []*
    sort-[] xs p = sym (sort‚â° xs) ‚àô congS list‚Üíslist p

    sort-[]' : sort []* ‚â° []
    sort-[]' = length-0 (sort []*) (sort-length‚â° []*)

    sort-[-] : ‚àÄ x -> sort [ x ]* ‚â° [ x ]
    sort-[-] x = list‚Üíslist-Œ∑ (sort [ x ]*) x (sort‚â° [ x ]*)

    list‚Üíslist-[] : (xs : List A) -> list‚Üíslist xs ‚â° []* -> xs ‚â° []
    list‚Üíslist-[] [] p = refl
    list‚Üíslist-[] (x ‚à∑ xs) p = ‚ä•.rec (snotz (congS S.length p))

  least : SList A -> Maybe A
  least xs = head-maybe (sort xs)

  least-nothing : ‚àÄ xs -> least xs ‚â° nothing -> xs ‚â° []*
  least-nothing xs p with sort xs | inspect sort xs
  ... | []     | [ q ]·µ¢ = sort-[] xs q
  ... | y ‚à∑ ys | [ q ]·µ¢ = ‚ä•.rec (¬¨just‚â°nothing p)

  least-Œ£ : ‚àÄ x xs -> least xs ‚â° just x -> Œ£[ ys ‚àà List A ] (sort xs ‚â° x ‚à∑ ys)
  least-Œ£ x xs p with sort xs
  ... | []     = ‚ä•.rec (¬¨nothing‚â°just p)
  ... | y ‚à∑ ys = ys , congS (_‚à∑ ys) (just-inj y x p)

  least-in : ‚àÄ x xs -> least xs ‚â° just x -> x ‚àà* xs
  least-in x xs p =
    let (ys , q) = least-Œ£ x xs p
        x‚à∑ys‚â°xs = congS list‚Üíslist (sym q) ‚àô sort‚â° xs
    in subst (x ‚àà*_) x‚à∑ys‚â°xs (x‚àà*xs x (list‚Üíslist ys))

  least-choice : ‚àÄ x y -> (least (x ‚à∑* [ y ]*) ‚â° just x) ‚äî‚Ä≤ (least (x ‚à∑* [ y ]*) ‚â° just y)
  least-choice x y with least (x ‚à∑* [ y ]*) | inspect least (x ‚à∑* [ y ]*)
  ... | nothing | [ p ]·µ¢ =
    ‚ä•.rec (snotz (congS S.length (least-nothing (x ‚à∑* [ y ]*) p)))
  ... | just z  | [ p ]·µ¢ =
    ‚äî-elim z‚â°x (z‚â°y ‚äî (‚ä•* , isProp‚ä•*)) (Œª _ -> want1 ‚äî want2)
      (Œª q -> L.inl (congS just q))
      (L.inr ‚àò ‚äî-elim z‚â°y (‚ä•* , isProp‚ä•*) (Œª _ -> want2) (congS just) ‚ä•.rec*)
      (least-in z (x ‚à∑* [ y ]*) p)
    where
    z‚â°x : hProp _
    z‚â°x = (z ‚â° x) , isSetA z x
    z‚â°y : hProp _
    z‚â°y = (z ‚â° y) , isSetA z y
    want1 : hProp _
    want1 = (just z ‚â° just x) , isSetMaybeA _ _
    want2 : hProp _
    want2 = (just z ‚â° just y) , isSetMaybeA _ _

  -- _‚â§_ : A -> A -> Type _
  -- x ‚â§ y = least (x ‚à∑* y ‚à∑* []*) ‚â° just x

  -- refl-‚â§ : ‚àÄ x -> x ‚â§ x
  -- refl-‚â§ x = ‚äé.rec (Œª p -> p) (Œª p -> p) (least-choice x x)

  -- trans-‚â§ : ‚àÄ x y z -> x ‚â§ y -> y ‚â§ z -> x ‚â§ z
  -- trans-‚â§ x y z p q = {!   !}

  -- antisym-‚â§ : ‚àÄ x y -> x ‚â§ y -> y ‚â§ x -> x ‚â° y
  -- antisym-‚â§ x y p q = ‚äé.rec
  --   (Œª xy -> just-inj x y $
  --     just x ‚â°‚ü® sym xy ‚ü©
  --     least (x ‚à∑* y ‚à∑* []*) ‚â°‚ü® congS least (swap x y []*) ‚ü©
  --     least (y ‚à∑* x ‚à∑* []*) ‚â°‚ü® q ‚ü©
  --     just y
  --   ‚àé)
  --   (Œª yx -> just-inj x y $
  --     just x ‚â°‚ü® sym p ‚ü©
  --     least (x ‚à∑* [ y ]*) ‚â°‚ü® yx ‚ü©
  --     just y
  --   ‚àé)
  --   (least-choice x y)

  -- total-‚â§ : ‚àÄ x y -> (x ‚â§ y) ‚äé (y ‚â§ x)
  -- total-‚â§ x y = ‚äé.rec
  --   (Œª p -> inl p)
  --   (Œª p -> inr $
  --     least (y ‚à∑* [ x ]*) ‚â°‚ü® congS least (swap y x []*) ‚ü©
  --     least (x ‚à∑* [ y ]*) ‚â°‚ü® p ‚ü©
  --     just y
  --   ‚àé)
  --   (least-choice x y)

  -- dec-‚â§ : ‚àÄ x y -> (x ‚â§ y) ‚äé (¬¨(x ‚â§ y))
  -- dec-‚â§ x y = decRec inl inr ((discreteMaybe discreteA) (least (x ‚à∑* y ‚à∑* []*)) (just x))

  -- ‚â§-isToset : IsToset _‚â§_
  -- IsToset.is-set ‚â§-isToset = isSetA
  -- IsToset.is-prop-valued ‚â§-isToset x y = isOfHLevelMaybe 0 isSetA _ _
  -- IsToset.is-refl ‚â§-isToset = refl-‚â§
  -- IsToset.is-trans ‚â§-isToset = trans-‚â§
  -- IsToset.is-antisym ‚â§-isToset = antisym-‚â§
  -- IsToset.is-strongly-connected ‚â§-isToset x y = ‚à£ total-‚â§ x y ‚à£‚ÇÅ 