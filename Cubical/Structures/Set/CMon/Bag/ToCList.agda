{-# OPTIONS --cubical --exact-split #-}

-- Definition taken from https://drops.dagstuhl.de/opus/volltexte/2023/18395/pdf/LIPIcs-ITP-2023-20.pdf
module Cubical.Structures.Set.CMon.Bag.ToCList where

open import Cubical.Core.Everything
open import Cubical.Foundations.Everything
open import Cubical.Foundations.Isomorphism
open import Cubical.Data.List renaming (_‚à∑_ to _‚à∑‚Çó_)
open import Cubical.Data.Nat
open import Cubical.Data.Nat.Order
open import Cubical.Data.Fin
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Sigma
import Cubical.Data.Empty as ‚ä•

import Cubical.Structures.Set.Mon.Desc as M
import Cubical.Structures.Set.CMon.Desc as M
import Cubical.Structures.Free as F
open import Cubical.Structures.Set.Mon.Array as A
open import Cubical.Structures.Set.Mon.List as L
open import Cubical.Structures.Sig
open import Cubical.Structures.Str public
open import Cubical.Structures.Tree
open import Cubical.Structures.Eq
open import Cubical.Structures.Arity hiding (_/_)
open import Cubical.Structures.Set.CMon.QFreeMon
open import Cubical.Structures.Set.CMon.Bag.Base
open import Cubical.Structures.Set.CMon.Bag.Free
open import Cubical.Relation.Nullary
open import Cubical.Data.Fin.LehmerCode hiding (LehmerCode; _‚à∑_; [])

open Iso

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level
    A : Type ‚Ñì
    n : ‚Ñï

fsuc‚â°punchIn : (k : Fin n) -> fsuc k ‚â° fst (punchIn fzero k)
fsuc‚â°punchIn k = refl

except : (t : Fin (suc n)) -> Fin n -> Fin (suc n)
except t k = fst (punchIn t k)

fsuc‚àòpunchOutZero‚â° : ‚àÄ {n}
          -> (f g : Fin (suc (suc n)) -> A)
          -> (œÉ : Iso (Fin (suc (suc n))) (Fin (suc (suc n)))) (p : f ‚â° g ‚àò œÉ .fun)
          -> (q : œÉ .fun fzero ‚â° fzero)
          -> f ‚àò fsuc ‚â° g ‚àò fsuc ‚àò punchOutZero œÉ q .fun
fsuc‚àòpunchOutZero‚â° f g œÉ p q =
  f ‚àò fsuc ‚â°‚ü® congS (_‚àò fsuc) p ‚ü©
  g ‚àò œÉ .fun ‚àò fsuc ‚â°‚ü® congS (g ‚àò_) (funExt (punchOutZero‚â°fsuc œÉ q)) ‚ü©
  g ‚àò fsuc ‚àò punchOutZero œÉ q .fun ‚àé

finNotZIsS : ‚àÄ {n} -> (k : Fin (suc n)) -> ¬¨ k ‚â° fzero -> Œ£[ w ‚àà Fin n ] (k ‚â° fsuc w)
finNotZIsS (zero , p) q = ‚ä•.rec (q (Fin-fst-‚â° refl))
finNotZIsS (suc k , p) q = (k , pred-‚â§-pred p) , Fin-fst-‚â° refl

finZOrS : ‚àÄ {n} -> (k : Fin (suc n)) -> (k ‚â° fzero) ‚äé (Œ£[ w ‚àà Fin n ] (k ‚â° fsuc w))
finZOrS k = decRec inl (inr ‚àò finNotZIsS k) (discreteFin k fzero)

exceptSuc‚â° : (k : Fin (suc n)) -> (x : Fin n) -> except (fsuc k) (fsuc x) ‚â° fsuc (except k x)
exceptSuc‚â° k x =
  fst (punchIn (fsuc k) (fsuc x)) ‚â°‚ü®‚ü©
  {!   !}

-- Proof taken from https://arxiv.org/pdf/2110.05412.pdf
module IsoToCList {‚Ñì} (A : Type ‚Ñì) where
  open import Cubical.Structures.Set.CMon.CList as CL
  open import Cubical.HITs.SetQuotients as Q

  module ùîÖ = M.CMonSEq < Bag A , BagDef.Free.Œ± bagFreeDef > (BagDef.Free.sat bagFreeDef)
  module ‚Ñ≠ = M.CMonSEq < CList A , clist-Œ± > clist-sat

  fromCList : CList A -> Bag A
  fromCList = CL.Free._‚ôØ squash/ (BagDef.Free.sat bagFreeDef) (BagDef.Free.Œ∑ bagFreeDef)

  ListToCList : List A -> CList A
  ListToCList = (_‚à∑ []) ‚ôØ
    where _‚ôØ = (L.Free._‚ôØ isSetCList) (M.cmonSatMon CL.clist-sat)

  tab : ‚àÄ n -> (Fin n -> A) -> CList A
  tab = curry (ListToCList ‚àò arrayIsoToList .fun)

  isContr‚âÖ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} -> isContr A -> isContr (Iso A A)
  isContr‚âÖ œï = inhProp‚ÜíisContr idIso \œÉ1 œÉ2 ->
    SetsIso‚â° (isContr‚ÜíisOfHLevel 2 œï) (isContr‚ÜíisOfHLevel 2 œï)
             (funExt \x -> isContr‚ÜíisProp œï (œÉ1 .fun x) (œÉ2 .fun x))
             (funExt \x -> isContr‚ÜíisProp œï (œÉ1 .inv x) (œÉ2 .inv x))

  isContrFin1‚âÖ : isContr (Iso (Fin 1) (Fin 1))
  isContrFin1‚âÖ = isContr‚âÖ isContrFin1

  toCList-eq : ‚àÄ n
             -> (f : Fin n -> A) (g : Fin n -> A) (œÉ : Iso (Fin n) (Fin n)) (p : f ‚â° g ‚àò œÉ .fun)
             -> tab n f ‚â° tab n g
  toCList-eq zero f g œÉ p =
    refl
  toCList-eq (suc zero) f g œÉ p =
    let q : œÉ ‚â° idIso
        q = isContr‚ÜíisProp isContrFin1‚âÖ œÉ idIso
    in congS (tab 1) (p ‚àô congS (g ‚àò_) (congS Iso.fun q))
  toCList-eq (suc (suc n)) f g œÉ p =
    ‚äé.rec
      (Œª q ->
        let IH = toCList-eq (suc n) (f ‚àò fsuc) (g ‚àò fsuc) (punchOutZero œÉ q) (fsuc‚àòpunchOutZero‚â° f g œÉ p q)
        in case1 IH q
      )
      (Œª (k , q) ->
        let
          IH1 = toCList-eq (suc n) (f ‚àò fsuc) (g ‚àò except (œÉ .fun fzero)) {!   !} {!   !}
        in case2 k q IH1
      )
      (finZOrS (œÉ .fun fzero))
    where
      case1 : (tab (suc n) (f ‚àò fsuc) ‚â° tab (suc n) (g ‚àò fsuc))
            -> œÉ .fun fzero ‚â° fzero
            -> tab (suc (suc n)) f ‚â° tab (suc (suc n)) g
      case1 IH œï =
        tab (suc (suc n)) f ‚â°‚ü®‚ü©
        f fzero ‚à∑ tab (suc n) (f ‚àò fsuc) ‚â°‚ü® congS (_‚à∑ tab (suc n) (f ‚àò fsuc)) (funExt‚Åª p fzero) ‚ü©
        g (œÉ .fun fzero) ‚à∑ tab (suc n) (f ‚àò fsuc) ‚â°‚ü® congS (\k -> g k ‚à∑ tab (suc n) (f ‚àò fsuc)) œï ‚ü©
        g fzero ‚à∑ tab (suc n) (f ‚àò fsuc) ‚â°‚ü® congS (g fzero ‚à∑_) IH ‚ü©
        g fzero ‚à∑ tab (suc n) (g ‚àò fsuc) ‚â°‚ü®‚ü©
        tab (suc (suc n)) g ‚àé
      case2 : (w : Fin (suc n))
            -> œÉ .fun fzero ‚â° fsuc w
            -> tab (suc n) (f ‚àò fsuc) ‚â° tab (suc n) (g ‚àò except (œÉ .fun fzero))
            -> tab (suc (suc n)) f ‚â° tab (suc (suc n)) g
      case2 k œï IH1 =
        comm (f fzero) (g fzero) (tab n (g ‚àò fsuc ‚àò except k)) eqn1 {!   !}
        where
        eqn1 : tab (suc n) (f ‚àò fsuc) ‚â° g fzero ‚à∑ tab n (g ‚àò fsuc ‚àò except k)
        eqn1 =
          tab (suc n) (f ‚àò fsuc) ‚â°‚ü® IH1 ‚ü©
          tab (suc n) (g ‚àò except (œÉ .fun fzero)) ‚â°‚ü®‚ü©
          g (except (œÉ .fun fzero) fzero) ‚à∑ tab n (g ‚àò except (œÉ .fun fzero) ‚àò fsuc) ‚â°‚ü® congS (Œª r -> g (except r fzero) ‚à∑ tab n (g ‚àò except r ‚àò fsuc)) œï ‚ü©
          g (except (fsuc k) fzero) ‚à∑ tab n (g ‚àò except (fsuc k) ‚àò fsuc) ‚â°‚ü®‚ü©
          g fzero ‚à∑ tab n (g ‚àò except (fsuc k) ‚àò fsuc) ‚â°‚ü® congS (Œª h -> g fzero ‚à∑ tab n (g ‚àò h)) (funExt (exceptSuc‚â° k)) ‚ü©
          g fzero ‚à∑ tab n (g ‚àò fsuc ‚àò except k) ‚àé

  -- toCList : Bag A -> CList A
  -- toCList Q.[ (n , f) ] = tab n f
  -- toCList (eq/ (n , f) (m , g) r i) = {!!}
  -- toCList (squash/ xs ys p q i j) =
  --   isSetCList (toCList xs) (toCList ys) (congS toCList p) (congS toCList q) i j

  -- toCList-fromCList : ‚àÄ xs -> toCList (fromCList xs) ‚â° xs
  -- toCList-fromCList x = {!`  !}
 