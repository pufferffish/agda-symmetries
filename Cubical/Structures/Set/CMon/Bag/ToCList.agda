{-# OPTIONS --cubical --exact-split #-}

-- Definition taken from https://drops.dagstuhl.de/opus/volltexte/2023/18395/pdf/LIPIcs-ITP-2023-20.pdf
module Cubical.Structures.Set.CMon.Bag.ToCList where

open import Cubical.Core.Everything
open import Cubical.Foundations.Everything
open import Cubical.Foundations.Isomorphism
open import Cubical.Data.List renaming (_‚à∑_ to _‚à∑‚Çó_)
open import Cubical.Data.Nat
open import Cubical.Data.Nat.Order
open import Cubical.Data.Fin
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Sigma
import Cubical.Data.Empty as ‚ä•

import Cubical.Structures.Set.Mon.Desc as M
import Cubical.Structures.Set.CMon.Desc as M
import Cubical.Structures.Free as F
open import Cubical.Structures.Set.Mon.Array as A
open import Cubical.Structures.Set.Mon.List as L
open import Cubical.Structures.Sig
open import Cubical.Structures.Str public
open import Cubical.Structures.Tree
open import Cubical.Structures.Eq
open import Cubical.Structures.Arity hiding (_/_)
open import Cubical.Structures.Set.CMon.QFreeMon
open import Cubical.Structures.Set.CMon.Bag.Base
open import Cubical.Structures.Set.CMon.Bag.Free
open import Cubical.Relation.Nullary
open import Cubical.Data.Fin.LehmerCode hiding (LehmerCode; _‚à∑_; [])

open import Cubical.Structures.Set.CMon.Bag.FinExcept

open Iso

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level
    A : Type ‚Ñì
    n : ‚Ñï

-- Proof taken from https://arxiv.org/pdf/2110.05412.pdf
module IsoToCList {‚Ñì} (A : Type ‚Ñì) where
  open import Cubical.Structures.Set.CMon.CList as CL
  open import Cubical.HITs.SetQuotients as Q
  open BagDef.Free

  module ùîÑ = M.MonSEq < Array A , array-Œ± > array-sat
  module ùîÖ = M.CMonSEq < Bag A , bagFreeDef .Œ± > (bagFreeDef .sat)
  module ‚Ñ≠ = M.CMonSEq < CList A , clist-Œ± > clist-sat

  abstract -- needed so Agda wouldn't get stuck
    fromCListHom : structHom < CList A , clist-Œ± > < Bag A , bagFreeDef .Œ± >
    fromCListHom = ext clistDef squash/ (bagFreeDef .sat) (BagDef.Free.Œ∑ bagFreeDef)

    fromCList : CList A -> Bag A
    fromCList = fromCListHom .fst

    fromCListIsHom : structIsHom < CList A , clist-Œ± > < Bag A , bagFreeDef .Œ± > fromCList
    fromCListIsHom = fromCListHom .snd

    fromCList-e : fromCList [] ‚â° ùîÖ.e
    fromCList-e = refl

    fromCList-++ : ‚àÄ xs ys -> fromCList (xs ‚Ñ≠.‚äï ys) ‚â° fromCList xs ùîÖ.‚äï fromCList ys
    fromCList-++ xs ys =
      fromCList (xs ‚Ñ≠.‚äï ys) ‚â°‚ü® sym (fromCListIsHom M.`‚äï (lookup (xs List.‚à∑ ys List.‚à∑ List.[]))) ‚ü©
      _ ‚â°‚ü® ùîÖ.‚äï-eta (lookup (xs List.‚à∑ ys List.‚à∑ List.[])) fromCList ‚ü©
      _ ‚àé

    fromCList-Œ∑ : ‚àÄ x -> fromCList (CL.[ x ]) ‚â° Q.[ A.Œ∑ x ]
    fromCList-Œ∑ x = congS (Œª f -> f x)
      (ext-Œ∑ clistDef squash/ (bagFreeDef .sat) (BagDef.Free.Œ∑ bagFreeDef))

  ListToCList : List A -> CList A
  ListToCList = (_‚à∑ []) ‚ôØ
    where _‚ôØ = (L.Free._‚ôØ isSetCList) (M.cmonSatMon CL.clist-sat)

  tab : ‚àÄ n -> (Fin n -> A) -> CList A
  tab = curry (ListToCList ‚àò arrayIsoToList .fun)

  isContr‚âÖ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} -> isContr A -> isContr (Iso A A)
  isContr‚âÖ œï = inhProp‚ÜíisContr idIso \œÉ1 œÉ2 ->
    SetsIso‚â° (isContr‚ÜíisOfHLevel 2 œï) (isContr‚ÜíisOfHLevel 2 œï)
             (funExt \x -> isContr‚ÜíisProp œï (œÉ1 .fun x) (œÉ2 .fun x))
             (funExt \x -> isContr‚ÜíisProp œï (œÉ1 .inv x) (œÉ2 .inv x))

  isContrFin1‚âÖ : isContr (Iso (Fin 1) (Fin 1))
  isContrFin1‚âÖ = isContr‚âÖ isContrFin1

  fsuc‚àòpunchOutZero‚â° : ‚àÄ {n}
          -> (f g : Fin (suc (suc n)) -> A)
          -> (œÉ : Iso (Fin (suc (suc n))) (Fin (suc (suc n)))) (p : f ‚â° g ‚àò œÉ .fun)
          -> (q : œÉ .fun fzero ‚â° fzero)
          -> f ‚àò fsuc ‚â° g ‚àò fsuc ‚àò punchOutZero œÉ q .fun
  fsuc‚àòpunchOutZero‚â° f g œÉ p q =
    f ‚àò fsuc ‚â°‚ü® congS (_‚àò fsuc) p ‚ü©
    g ‚àò œÉ .fun ‚àò fsuc ‚â°‚ü® congS (g ‚àò_) (funExt (punchOutZero‚â°fsuc œÉ q)) ‚ü©
    g ‚àò fsuc ‚àò punchOutZero œÉ q .fun ‚àé

  toCList-eq : ‚àÄ n
             -> (f : Fin n -> A) (g : Fin n -> A) (œÉ : Iso (Fin n) (Fin n)) (p : f ‚â° g ‚àò œÉ .fun)
             -> tab n f ‚â° tab n g
  toCList-eq zero f g œÉ p =
    refl
  toCList-eq (suc zero) f g œÉ p =
    let q : œÉ ‚â° idIso
        q = isContr‚ÜíisProp isContrFin1‚âÖ œÉ idIso
    in congS (tab 1) (p ‚àô congS (g ‚àò_) (congS Iso.fun q))
  toCList-eq (suc (suc n)) f g œÉ p =
    ‚äé.rec
      (Œª q ->
        let IH = toCList-eq (suc n) (f ‚àò fsuc) (g ‚àò fsuc) (punchOutZero œÉ (sym q)) (fsuc‚àòpunchOutZero‚â° f g œÉ p (sym q))
        in case1 IH (sym q)
      )
      (Œª (k , q) ->
        case2 k (sym q)
          (toCList-eq (suc n) (f ‚àò fsuc) ((g ‚àº) ‚àò pIn (fsuc k)) (punch-œÉ œÉ) (sym (IH1-lemma k q)))
          (toCList-eq (suc n) (g-œÉ k) (g ‚àò fsuc) (fill-œÉ k) (sym (funExt (IH2-lemma k q))))
      )
      (fsplit (œÉ .fun fzero))
    where
      g-œÉ : ‚àÄ k -> Fin (suc n) -> A
      g-œÉ k (zero , p) = g (œÉ .fun fzero)
      g-œÉ k (suc j , p) = (g ‚àº) (1+ (pIn k (j , pred‚Ñï-‚â§-pred‚Ñï p)))

      IH1-lemma : ‚àÄ k -> fsuc k ‚â° œÉ .fun fzero -> (g ‚àº) ‚àò pIn (fsuc k) ‚àò punch-œÉ œÉ .fun ‚â° f ‚àò fsuc
      IH1-lemma k q =
          (g ‚àº) ‚àò pIn (fsuc k) ‚àò punch-œÉ œÉ .fun
        ‚â°‚ü® congS (Œª z -> (g ‚àº) ‚àò pIn z ‚àò punch-œÉ œÉ .fun) q ‚ü©
          (g ‚àº) ‚àò pIn (œÉ .fun fzero) ‚àò punch-œÉ œÉ .fun
        ‚â°‚ü®‚ü©
          (g ‚àº) ‚àò pIn (œÉ .fun fzero) ‚àò pOut (œÉ .fun fzero) ‚àò ((G .fun œÉ) .snd) .fun ‚àò pIn fzero
        ‚â°‚ü® congS (Œª h -> (g ‚àº) ‚àò h ‚àò ((G .fun œÉ) .snd) .fun ‚àò (invIso pIso) .fun) (funExt (pIn‚àòOut (œÉ .fun fzero))) ‚ü©
          (g ‚àº) ‚àò equivIn œÉ .fun ‚àò pIn fzero
        ‚â°‚ü®‚ü©
          g ‚àò œÉ .fun ‚àò fst ‚àò pIn fzero
        ‚â°‚ü® congS (_‚àò fst ‚àò pIn fzero) (sym p) ‚ü©
          f ‚àò fst ‚àò pIn fzero
        ‚â°‚ü® congS (f ‚àò_) (funExt pInZ‚â°fsuc) ‚ü©
          f ‚àò fsuc ‚àé

      postulate
        IH2-lemma : ‚àÄ k -> fsuc k ‚â° œÉ .fun fzero -> (j : Fin (suc n)) -> g (fsuc (fill-œÉ k .fun j)) ‚â° (g-œÉ k) j
      -- IH2-lemma k q (zero , r) = congS g q
      -- IH2-lemma k q (suc j , r) =
      --     g (fsuc (equivOut {k = k} (compIso pIso (invIso pIso)) .fun (suc j , r)))
      --   ‚â°‚ü®‚ü©
      --     g (fsuc (equivOut {k = k} (compIso pIso (invIso pIso)) .fun (j' .fst)))
      --   ‚â°‚ü® congS (g ‚àò fsuc) (equivOut-beta-Œ± {œÉ = compIso pIso (invIso pIso)} j') ‚ü©
      --     g (fsuc (fst (pIn k (pOut fzero j'))))
      --   ‚â°‚ü®‚ü©
      --     g (fsuc (fst (pIn k (‚äé.rec _ (Œª k<j -> pred‚Ñï (suc j) , _) (suc j <? 0 on _)))))
      --   ‚â°‚ü® congS (g ‚àò fsuc ‚àò fst ‚àò pIn k ‚àò ‚äé.rec _ _) (<?-beta-inr (suc j) 0 _ (suc-‚â§-suc zero-‚â§)) ‚ü©
      --     (g ‚àò fsuc ‚àò fst ‚àò pIn k) (pred‚Ñï (suc j) , _)
      --   ‚â°‚ü® congS {x = pred‚Ñï (suc j) , _} {y = j , pred‚Ñï-‚â§-pred‚Ñï r} (g ‚àò fsuc ‚àò fst ‚àò pIn k) (Fin-fst-‚â° refl) ‚ü©
      --     (g ‚àò fsuc ‚àò fst ‚àò pIn k) (j , pred‚Ñï-‚â§-pred‚Ñï r) ‚àé
      --   where
      --   j' : FinExcept fzero
      --   j' = (suc j , r) , znots ‚àò (congS fst)

      case1 : (tab (suc n) (f ‚àò fsuc) ‚â° tab (suc n) (g ‚àò fsuc))
            -> œÉ .fun fzero ‚â° fzero
            -> tab (suc (suc n)) f ‚â° tab (suc (suc n)) g
      case1 IH œï =
        tab (suc (suc n)) f ‚â°‚ü®‚ü©
        f fzero ‚à∑ tab (suc n) (f ‚àò fsuc) ‚â°‚ü® congS (_‚à∑ tab (suc n) (f ‚àò fsuc)) (funExt‚Åª p fzero) ‚ü©
        g (œÉ .fun fzero) ‚à∑ tab (suc n) (f ‚àò fsuc) ‚â°‚ü® congS (\k -> g k ‚à∑ tab (suc n) (f ‚àò fsuc)) œï ‚ü©
        g fzero ‚à∑ tab (suc n) (f ‚àò fsuc) ‚â°‚ü® congS (g fzero ‚à∑_) IH ‚ü©
        g fzero ‚à∑ tab (suc n) (g ‚àò fsuc) ‚â°‚ü®‚ü©
        tab (suc (suc n)) g ‚àé
      case2 : (k : Fin (suc n))
            -> œÉ .fun fzero ‚â° fsuc k
            -> tab (suc n) (f ‚àò fsuc) ‚â° tab (suc n) ((g ‚àº) ‚àò pIn (fsuc k))
            -> tab (suc n) (g-œÉ k) ‚â° tab (suc n) (g ‚àò fsuc)
            -> tab (suc (suc n)) f ‚â° tab (suc (suc n)) g
      case2 k œï IH1 IH2 =
        comm (f fzero) (g fzero) (tab n ((g ‚àº) ‚àò pIn (fsuc k) ‚àò fsuc))
          (sym (eqn1 IH1)) (sym (eqn2 IH2))
        where
        eqn1 : tab (suc n) (f ‚àò fsuc) ‚â° tab (suc n) ((g ‚àº) ‚àò pIn (fsuc k))
              -> g fzero ‚à∑ tab n ((g ‚àº) ‚àò pIn (fsuc k) ‚àò fsuc) ‚â° tab (suc n) (f ‚àò fsuc)
        eqn1 IH =
            g fzero ‚à∑ tab n ((g ‚àº) ‚àò pIn (fsuc k) ‚àò fsuc)
          ‚â°‚ü® congS (Œª z -> g z ‚à∑ tab n ((g ‚àº) ‚àò pIn (fsuc k) ‚àò fsuc)) (Fin-fst-‚â° refl) ‚ü©
            ((g ‚àº) ‚àò pIn (fsuc k)) fzero ‚à∑ tab n ((g ‚àº) ‚àò pIn (fsuc k) ‚àò fsuc)
          ‚â°‚ü®‚ü©
            tab (suc n) ((g ‚àº) ‚àò pIn (fsuc k))
          ‚â°‚ü® sym IH ‚ü©
            tab (suc n) (f ‚àò fsuc) ‚àé

        g-œÉ‚â° : tab (suc n) (g-œÉ k) ‚â° g (œÉ .fun fzero) ‚à∑ tab n ((g ‚àº) ‚àò 1+_ ‚àò pIn k)
        g-œÉ‚â° = congS (Œª z -> g (œÉ .fun fzero) ‚à∑ tab n z)
          (funExt Œª z -> congS {x = (fst z , pred-‚â§-pred (snd (fsuc z)))} ((g ‚àº) ‚àò 1+_ ‚àò pIn k) (Fin-fst-‚â° refl))

        eqn2 : tab (suc n) (g-œÉ k) ‚â° tab (suc n) (g ‚àò fsuc)
            -> f fzero ‚à∑ tab n ((g ‚àº) ‚àò pIn (fsuc k) ‚àò fsuc) ‚â° tab (suc n) (g ‚àò fsuc)
        eqn2 IH2 =
            f fzero ‚à∑ tab n ((g ‚àº) ‚àò pIn (fsuc k) ‚àò fsuc)
          ‚â°‚ü® congS (Œª h -> h fzero ‚à∑ tab n ((g ‚àº) ‚àò pIn (fsuc k) ‚àò fsuc)) p ‚ü©
            g (œÉ .fun fzero) ‚à∑ tab n ((g ‚àº) ‚àò pIn (fsuc k) ‚àò fsuc)
          ‚â°‚ü® congS (Œª h -> g (œÉ .fun fzero) ‚à∑ tab n ((g ‚àº) ‚àò h)) (sym pIn-fsuc-nat) ‚ü©
            g (œÉ .fun fzero) ‚à∑ tab n ((g ‚àº) ‚àò 1+_ ‚àò pIn k)
          ‚â°‚ü® sym g-œÉ‚â° ‚ü©
            tab (suc n) (g-œÉ k)
          ‚â°‚ü® IH2 ‚ü©
            tab (suc n) (g ‚àò fsuc) ‚àé

  abstract
    toCList-eq' : ‚àÄ n m f g -> (r : (n , f) ‚âà (m , g)) -> tab n f ‚â° tab m g
    toCList-eq' n m f g (œÉ , p) =
      tab n f ‚â°‚ü® toCList-eq n f (g ‚àò (finSubst n‚â°m)) (compIso œÉ (Fin‚âÖ (sym n‚â°m))) (sym lemma-Œ±) ‚ü©
      (uncurry tab) (n , g ‚àò finSubst n‚â°m) ‚â°‚ü® congS (uncurry tab) (Array‚â° n‚â°m Œª _ _ -> congS g (Fin-fst-‚â° refl)) ‚ü©
      (uncurry tab) (m , g) ‚àé
      where
      n‚â°m : n ‚â° m
      n‚â°m = ‚âà-length œÉ
      lemma-Œ± : g ‚àò finSubst n‚â°m ‚àò (Fin‚âÖ (sym n‚â°m)) .fun ‚àò œÉ .fun ‚â° f
      lemma-Œ± =
          g ‚àò finSubst n‚â°m ‚àò finSubst (sym n‚â°m) ‚àò œÉ .fun
        ‚â°‚ü® congS {x = finSubst n‚â°m ‚àò finSubst (sym n‚â°m)} {y = idfun _} (Œª h -> g ‚àò h ‚àò œÉ .fun) (funExt (Œª x -> Fin-fst-‚â° refl)) ‚ü©
          g ‚àò œÉ .fun
        ‚â°‚ü® sym p ‚ü©
          f ‚àé

  abstract
    toCList : Bag A -> CList A
    toCList Q.[ (n , f) ] = tab n f
    toCList (eq/ (n , f) (m , g) r i) = toCList-eq' n m f g r i
    toCList (squash/ xs ys p q i j) =
      isSetCList (toCList xs) (toCList ys) (congS toCList p) (congS toCList q) i j

    toCList-e : toCList ùîÖ.e ‚â° CL.[]
    toCList-e = refl

    toCList-++ : ‚àÄ xs ys -> toCList (xs ùîÖ.‚äï ys) ‚â° toCList xs ‚Ñ≠.‚äï toCList ys
    toCList-++ =
      elimProp (Œª _ -> isPropŒ† (Œª _ -> isSetCList _ _)) Œª xs ->
        elimProp (Œª _ -> isSetCList _ _) Œª ys ->
          {!   !}
          -- xs ys : Array A -> toCList Q.[ xs ] ++ toCList Q.[ ys ] = toCList Q.[ xs ++ ys ] 

    toCList‚àòfromCList-Œ∑ : ‚àÄ x -> toCList (fromCList CL.[ x ]) ‚â° CL.[ x ]
    toCList‚àòfromCList-Œ∑ x = refl

    fromCList‚àòtoCList-Œ∑ : ‚àÄ x -> fromCList (toCList Q.[ A.Œ∑ x ]) ‚â° Q.[ A.Œ∑ x ]
    fromCList‚àòtoCList-Œ∑ x = fromCList-Œ∑ x

  toCList-fromCList : ‚àÄ xs -> toCList (fromCList xs) ‚â° xs
  toCList-fromCList =
    elimCListProp.f _
      (congS toCList fromCList-e ‚àô toCList-e) 
      (Œª x {xs} p ->
        toCList (fromCList (x ‚à∑ xs)) ‚â°‚ü® congS toCList (fromCList-++ CL.[ x ] xs) ‚ü©
        toCList (fromCList CL.[ x ] ùîÖ.‚äï fromCList xs) ‚â°‚ü® toCList-++ (fromCList CL.[ x ]) (fromCList xs) ‚ü©
        toCList (fromCList CL.[ x ]) ‚Ñ≠.‚äï toCList (fromCList xs) ‚â°‚ü® congS (toCList (fromCList CL.[ x ]) ‚Ñ≠.‚äï_) p ‚ü©
        toCList (fromCList CL.[ x ]) ‚Ñ≠.‚äï xs ‚â°‚ü® congS {x = toCList (fromCList CL.[ x ])} {y = CL.[ x ]} (‚Ñ≠._‚äï xs) (toCList‚àòfromCList-Œ∑ x) ‚ü©
        CL.[ x ] ‚Ñ≠.‚äï xs
      ‚àé)
      (isSetCList _ _)