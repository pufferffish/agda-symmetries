{-# OPTIONS --cubical --safe --exact-split #-}

module Cubical.Structures.Set.Mon.Membership where

open import Cubical.Foundations.Everything
open import Cubical.Data.Sigma
open import Cubical.Data.Nat
open import Cubical.Data.Nat.Order
open import Cubical.Data.Unit
import Cubical.Data.Empty as ‚ä•
open import Cubical.Functions.Logic as L

import Cubical.Structures.Set.Mon.Desc as M
import Cubical.Structures.Free as F
open import Cubical.Structures.Sig
open import Cubical.Structures.Str public
open import Cubical.Structures.Tree
open import Cubical.Structures.Eq
open import Cubical.Structures.Arity
open import Cubical.HITs.PropositionalTruncation as P
open import Cubical.Data.Sum as ‚äé

module FMonDef = F.Definition M.MonSig M.MonEqSig M.MonSEq

module Membership {‚Ñì} (ùîâ : FMonDef.Free ‚Ñì (‚Ñì-suc ‚Ñì) 2) {A : Type ‚Ñì} (isSetA : isSet A) where
  open FMonDef.Free
  open M.MonStruct < ùîâ .F A , ùîâ .Œ± >

  yoneda : A -> A -> hProp ‚Ñì
  yoneda x y = (x ‚â° y) , (isSetA x y)

  ‚ààPropHom : A -> structHom < ùîâ .F A , ùîâ .Œ± > (M.‚äî-MonStr ‚Ñì)
  ‚ààPropHom x = ext ùîâ isSetHProp (M.‚äî-MonStr-MonSEq ‚Ñì) (yoneda x)

  ‚ààProp : A -> ùîâ .F A -> hProp ‚Ñì
  ‚ààProp x = ‚ààPropHom x .fst

  _‚àà_ : A -> ùîâ .F A -> Type ‚Ñì
  x ‚àà xs = ‚ààProp x xs .fst

  isProp-‚àà : (x : A) -> (xs : ùîâ .F A) -> isProp (x ‚àà xs)
  isProp-‚àà x xs = (‚ààProp x xs) .snd

  private
    singleton-lemma : ‚àÄ x -> (‚ààPropHom x) .fst ‚àò ùîâ .Œ∑ ‚â° yoneda x
    singleton-lemma = ext-Œ∑ ùîâ isSetHProp (M.‚äî-MonStr-MonSEq ‚Ñì) ‚àò yoneda
 
  x‚ààŒ∑x : ‚àÄ x -> x ‚àà ùîâ .Œ∑ x
  x‚ààŒ∑x x = transport (Œª i -> singleton-lemma x (~ i) x .fst) refl

  x‚ààxs‚Üíx‚ààxs+ys : ‚àÄ x xs ys -> x ‚àà xs -> x ‚àà (xs ‚äï ys)
  x‚ààxs‚Üíx‚ààxs+ys x xs ys x‚ààxs = transport
    (Œª i -> ‚ààPropHom x .snd M.`‚äï ‚ü™ xs ‚®æ ys ‚ü´ i .fst) (L.inl x‚ààxs)

  x‚ààys‚Üíx‚ààxs+ys : ‚àÄ x xs ys -> x ‚àà ys -> x ‚àà (xs ‚äï ys)
  x‚ààys‚Üíx‚ààxs+ys x xs ys x‚ààys = transport
    (Œª i -> ‚ààPropHom x .snd M.`‚äï ‚ü™ xs ‚®æ ys ‚ü´ i .fst) (L.inr x‚ààys)

  x‚ààxs : ‚àÄ x xs -> x ‚àà (ùîâ .Œ∑ x ‚äï xs)
  x‚ààxs x xs = x‚ààxs‚Üíx‚ààxs+ys x (ùîâ .Œ∑ x) xs (x‚ààŒ∑x x)

  x‚àày‚à∑xs : ‚àÄ x y xs -> x ‚àà xs -> x ‚àà (ùîâ .Œ∑ y ‚äï xs)
  x‚àày‚à∑xs x y xs x‚ààxs = x‚ààys‚Üíx‚ààxs+ys x (ùîâ .Œ∑ y) xs x‚ààxs

  ¬¨‚ààe : ‚àÄ x -> (x ‚àà e) -> ‚ä•.‚ä•
  ¬¨‚ààe x = ‚ä•.rec* ‚àò transport (Œª i -> ‚ààPropHom x .snd M.`e ‚ü™‚ü´ (~ i) .fst)

  x‚àà[y]‚Üíx‚â°y : ‚àÄ x y -> x ‚àà (ùîâ .Œ∑ y) -> x ‚â° y
  x‚àà[y]‚Üíx‚â°y x y = transport Œª i -> singleton-lemma x i y .fst
