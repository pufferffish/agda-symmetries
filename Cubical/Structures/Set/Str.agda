{-# OPTIONS --cubical #-}

module Cubical.Structures.Set.Str where

open import Cubical.Foundations.Everything
open import Cubical.Foundations.Equiv
open import Cubical.Functions.Image
open import Cubical.HITs.PropositionalTruncation as P
open import Cubical.Data.Nat
open import Cubical.Data.FinData as F
open import Cubical.Data.List as L
open import Cubical.Data.List.FinData as F
open import Cubical.Data.Sigma
open import Cubical.Reflection.RecordEquiv
open import Cubical.HITs.SetQuotients as Q
open import Agda.Primitive

open import Cubical.Structures.Set.Sig

-- TODO: prove lemmas about its homotopy type
record struct {f a : Level} (n : Level) (œÉ : Sig f a) : Type (‚Ñì-max f (‚Ñì-max a (‚Ñì-suc n))) where
  constructor <_,_>
  field
    carrier : Type n
    algebra : sig œÉ carrier -> carrier
open struct public

module _  {f a x y : Level} {œÉ : Sig f a} (ùîõ : struct x œÉ) (ùîú : struct y œÉ)  where
  structIsHom : (h : ùîõ .carrier -> ùîú .carrier) -> Type (‚Ñì-max f (‚Ñì-max a (‚Ñì-max x y)))
  structIsHom h =
    ((f : œÉ .symbol) -> (i : œÉ .arity f -> ùîõ .carrier) -> ùîú .algebra (f , h ‚àò i) ‚â° h (ùîõ .algebra (f , i)))

  structHom : Type (‚Ñì-max f (‚Ñì-max a (‚Ñì-max x y)))
  structHom = Œ£[ h ‚àà (ùîõ .carrier -> ùîú .carrier) ] structIsHom h

  structHom‚â° : (g h : structHom) -> isSet (ùîú .carrier) -> g .fst ‚â° h .fst -> g ‚â° h
  structHom‚â° (g-f , g-hom) (h-f , h-hom) isSetY =
    Œ£‚â°Prop (\fun -> isPropŒ† \f -> isPropŒ† \o -> isSetY (ùîú .algebra (f , fun ‚àò o)) (fun (ùîõ .algebra (f , o))))
